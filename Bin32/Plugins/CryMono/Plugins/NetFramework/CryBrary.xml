<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CryBrary</name>
    </assembly>
    <members>
        <member name="T:CryEngine.ActorBase">
            <summary>
            Base class which all actors must derive from. Includes basic callbacks.
            </summary>
        </member>
        <member name="T:CryEngine.EntityBase">
            <summary>
            Represents an CryENGINE entity
            </summary>
        </member>
        <member name="T:CryEngine.CryScriptInstance">
            <summary>
            This interface permits derived classes to be used for script compilation recognition.
            </summary>
        </member>
        <member name="M:CryEngine.CryScriptInstance.OnUpdate">
            <summary>
            Called each frame if script has been set to be regularly updated (See Updated property)
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.ScriptId">
            <summary>
            This script instance's id, used to keep track of instances in <see cref="T:CryEngine.Initialization.ScriptManager"/>.
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.ReceiveUpdates">
            <summary>
            Controls whether the entity receives an update per frame.
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.IsDestroyed">
            <summary>
            Set to true when the script instance is removed via ScriptManager.RemoveInstances.
            </summary>
        </member>
        <member name="P:CryEngine.CryScriptInstance.Script">
            <summary>
            Gets the instance script, set in <see cref="M:CryEngine.Initialization.ScriptManager.CreateScriptInstance(CryEngine.Initialization.CryScript,System.Object[],System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:CryEngine.CryScriptInstance.OnDestroyed">
            <summary>
            Event that is invoked when this script is destroyed from <see cref="T:CryEngine.Initialization.ScriptManager"/>.
            </summary>
        </member>
        <member name="M:CryEngine.EntityBase.Remove(System.Boolean)">
            <summary>
            Removes the entity from the CryEngine world.
            </summary>
            <param name="forceRemoveNow">If true, the entity will be removed immediately.</param>
        </member>
        <member name="M:CryEngine.EntityBase.GetSlotFlags(System.Int32)">
            <summary>
            Retrieves the flags of the specified slot.
            </summary>
            <param name="slot">Index of the slot</param>
            <returns>The slot flags, or 0 if specified slot is not valid.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.SetSlotFlags(CryEngine.EntitySlotFlags,System.Int32)">
            <summary>
            Sets the flags of the specified slot.
            </summary>
            <param name="flags">Flags to set.</param>
            <param name="slot">Index of the slot, if -1 apply to all existing slots.</param>
        </member>
        <member name="M:CryEngine.EntityBase.GetAttachment(System.Int32,System.Int32)">
            <summary>
            Gets the attachment at the specified slot and index.
            </summary>
            <param name="index">Attachment index</param>
            <param name="characterSlot">Index of the character slot we wish to get an attachment from</param>
            <returns>null if failed, otherwise the attachment.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.GetAttachment(System.String,System.Int32)">
            <summary>
            Gets the attachment by name at the specified slot.
            </summary>
            <param name="name">Attachment name</param>
            <param name="characterSlot">Index of the character slot we wish to get an attachment from</param>
            <returns>null if failed, otherwise the attachment.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.GetAttachmentCount(System.Int32)">
            <summary>
            Gets the number of attachments at the specified character slot.
            </summary>
            <param name="characterSlot">Index of the slot we wish to get the attachment count of</param>
            <returns>Number of attachments at the specified slot</returns>
        </member>
        <member name="M:CryEngine.EntityBase.LoadLight(CryEngine.LightParams,System.Int32)">
            <summary>
            Loads a light source to the specified slot, or to the next available slot.
            </summary>
            <param name="parameters">New params of the light source we wish to load</param>
            <param name="slot">Slot we want to load the light into, if -1 chooses the next available slot.</param>
            <returns>The slot where the light source was loaded, or -1 if loading failed.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.LoadObject(System.String,System.Int32)">
            <summary>
            Loads a mesh for this entity. Can optionally load multiple meshes using entity slots.
            </summary>
            <param name="name">Path to the object (Relative to the game directory)</param>
            <param name="slot"></param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.GetObjectFilePath(System.Int32)">
            <summary>
            Gets the path to the currently loaded object.
            </summary>
            <param name="slot">Slot containing the object we want to know the path of.</param>
            <returns>Path to the currently loaded object at the specified slot.</returns>
        </member>
        <member name="M:CryEngine.EntityBase.PlayAnimation(System.String,CryEngine.AnimationFlags,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            Plays a raw animation.
            </summary>
            <param name="animationName">Name of the animation we wish to play</param>
            <param name="flags"></param>
            <param name="slot">Slot on which to play the animation</param>
            <param name="layer">Animation layer to play the animation in.</param>
            <param name="blend">Transition time between two animations.</param>
            <param name="speed">Animation playback speed</param>
        </member>
        <member name="M:CryEngine.EntityBase.StopAnimation(System.Int32,System.Int32,System.Single)">
            <summary>
            Stops the currently playing animation.
            </summary>
            <param name="slot">The character slot.</param>
            <param name="layer">The animation layer which we want to stop. If -1, stops all layers.</param>
            <param name="blendOutTime"></param>
        </member>
        <member name="M:CryEngine.EntityBase.FreeSlot(System.Int32)">
            <summary>
            Frees the specified slot of all objects.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:CryEngine.EntityBase.AddMovement(CryEngine.EntityMovementRequest@)">
            <summary>
            Requests movement at the specified slot, providing an animated character is currently loaded.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:CryEngine.EntityBase.GetJointAbsolute(System.String,System.Int32)">
            <summary>
            Gets the absolute of the specified joint
            </summary>
            <param name="jointName">Name of the joint</param>
            <param name="characterSlot">Slot containing the character</param>
            <returns>Absolute of the specified joint</returns>
        </member>
        <member name="M:CryEngine.EntityBase.GetJointAbsoluteDefault(System.String,System.Int32)">
            <summary>
            Gets the default absolute of the specified joint
            </summary>
            <param name="jointName">Name of the joint</param>
            <param name="characterSlot">Slot containing the character</param>
            <returns>Default absolute of the specified joint</returns>
        </member>
        <member name="M:CryEngine.EntityBase.SetJointAbsolute(System.String,CryEngine.QuatT,System.Int32)">
            <summary>
            Sets the absolute of the specified joint
            </summary>
            <param name="jointName">Name of the joint</param>
            <param name="absolute">New absolute</param>
            <param name="characterSlot">Slot containing the character</param>
        </member>
        <member name="M:CryEngine.EntityBase.GetJointRelative(System.String,System.Int32)">
            <summary>
            Gets the relative of the specified joint
            </summary>
            <param name="jointName">Name of the joint</param>
            <param name="characterSlot">Slot containing the character</param>
            <returns>Relative of the specified joint</returns>
        </member>
        <member name="M:CryEngine.EntityBase.GetJointRelativeDefault(System.String,System.Int32)">
            <summary>
            Gets the default relative of the specified joint
            </summary>
            <param name="jointName">Name of the joint</param>
            <param name="characterSlot">Slot containing the character</param>
            <returns>Default relative of the specified joint</returns>
        </member>
        <member name="P:CryEngine.EntityBase.ScriptTable">
            <summary>
            Gets this entity's Lua script table, providing it exists.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Hidden">
            <summary>
            Gets or sets a value indicating whether the entity is hidden or not.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Position">
            <summary>
            Gets or sets the world space entity position.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Rotation">
            <summary>
            Gets or sets the world space entity orientation quaternion.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.LocalPosition">
            <summary>
            Gets or sets the local space entity position.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.LocalRotation">
            <summary>
            Gets or sets the local space entity orientation quaternion.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Transform">
            <summary>
            Gets or sets the world space entity transformation matrix.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.LocalTransform">
            <summary>
            Gets or sets the local space entity transformation matrix.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.BoundingBox">
            <summary>
            Gets the entity axis aligned bounding box in the world space.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.LocalBoundingBox">
            <summary>
            Gets the entity axis aligned bounding box in the world space.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Name">
            <summary>
            Gets or sets the entity name.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Flags">
            <summary>
            Gets or sets the entity flags.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Material">
            <summary>
            Gets or sets the material currently assigned to this entity.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Id">
            <summary>
            Gets  the runtime unique identifier of this entity assigned to it by the Entity System.
            EntityId may not be the same when saving/loading entity.
            EntityId is mostly used in runtime for fast and unique identification of entities..
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Velocity">
            <summary>
            Gets or sets entity velocity as set by the physics system.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.Physics">
            <summary>
            Gets the physical entity, contains essential functions for modifying the entitys existing physical state.
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.EntityHandle">
            <summary>
            Gets or sets IEntity handle
            </summary>
        </member>
        <member name="P:CryEngine.EntityBase.AnimatedCharacterHandle">
            <summary>
            Gets or sets IAnimatedCharacter handle
            </summary>
        </member>
        <member name="M:CryEngine.ActorBase.OnSpawn">
            <summary>
            Called after successful actor creation via Actor.Create.
            </summary>
        </member>
        <member name="M:CryEngine.ActorBase.Remove(System.Boolean)">
            <summary>
            Removes this actor from the world.
            </summary>
            <param name="forceRemoveNow"></param>
        </member>
        <member name="P:CryEngine.ActorBase.IsLocalClient">
            <summary>
            Gets a value indicating whether this actor is controlled by the local client. See <see cref="P:CryEngine.Actor.LocalClient"/>.
            </summary>
        </member>
        <member name="P:CryEngine.ActorBase.Health">
            <summary>
            Gets or sets the current health of this actor.
            </summary>
        </member>
        <member name="P:CryEngine.ActorBase.MaxHealth">
            <summary>
            Gets or sets the max health value for this actor.
            </summary>
        </member>
        <member name="P:CryEngine.ActorBase.IsDead">
            <summary>
            Gets a value indicating whether this actor has died. Returns true if <see cref="P:CryEngine.ActorBase.Health"/> is equal to or below 0.
            </summary>
        </member>
        <member name="P:CryEngine.ActorBase.ChannelId">
            <summary>
            Gets or sets the channel id, index to the net channel in use by this actor.
            </summary>
        </member>
        <member name="M:CryEngine.Actor.OnEditorReset(System.Boolean)">
            <summary>
            Called when resetting the state of the entity in Editor.
            </summary>
            <param name="enteringGame">true if currently entering gamemode, false if exiting.</param>
        </member>
        <member name="M:CryEngine.Actor.UpdateView(CryEngine.ViewParams@)">
            <summary>
            Called to update the view associated to this actor.
            </summary>
            <param name="viewParams"></param>
        </member>
        <member name="M:CryEngine.Actor.OnPrePhysicsUpdate">
            <summary>
            Called prior to updating physics, useful for requesting movement.
            </summary>
        </member>
        <member name="M:CryEngine.Actor.Get(System.Int32)">
            <summary>
            Gets the actor with the specified channel id if it exists.
            </summary>
            <param name="channelId">channelId of the actor you want to obtain</param>
            <returns>Actor if found, null otherwise</returns>
        </member>
        <member name="M:CryEngine.Actor.Get``1(System.Int32)">
            <summary>
            Gets the actor with the specified channel id if it exists.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channelId">channelId of the actor you want to obtain</param>
            <returns>Actor if found, null otherwise</returns>
        </member>
        <member name="M:CryEngine.Actor.Get(CryEngine.EntityId)">
            <summary>
            Gets the actor with the specified entity id if it exists.
            </summary>
            <param name="actorId">entityId of the actor you want to obtain</param>
            <returns>Actor if found, null otherwise</returns>
        </member>
        <member name="M:CryEngine.Actor.Get``1(CryEngine.EntityId)">
            <summary>
            Gets the actor with the specified entity id if it exists.
            </summary>
            <param name="actorId">entityId of the actor you want to obtain</param>
            <returns>Actor if found, null otherwise</returns>
        </member>
        <member name="M:CryEngine.Actor.Create``1(System.Int32,System.String,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3})">
            <summary>
            Spawns a new actor
            </summary>
            <typeparam name="T"></typeparam>
            <param name="channelId"></param>
            <param name="name"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Actor.Create(System.Type,System.Int32,System.String,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3})">
            <summary>
            Spawns a new actor
            </summary>
            <param name="actorType"></param>
            <param name="channelId"></param>
            <param name="name"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Actor.Create(System.String,System.Int32,System.String,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3})">
            <summary>
            Spawns a new actor
            </summary>
            <param name="className"></param>
            <param name="channelId"></param>
            <param name="name"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Actor.Remove(CryEngine.EntityId)">
            <summary>
            Removes an actor by entity id.
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:CryEngine.Actor.Remove(System.Int32)">
            <summary>
            Removes an actor by channelId
            </summary>
            <param name="channelId"></param>
        </member>
        <member name="P:CryEngine.Actor.Health">
            <summary>
            Sets / gets the current health of this actor.
            </summary>
        </member>
        <member name="P:CryEngine.Actor.MaxHealth">
            <summary>
            Sets / gets the max health value for this actor.
            </summary>
        </member>
        <member name="P:CryEngine.Actor.LocalClient">
            <summary>
            Gets the player actor in use on this PC.
            </summary>
        </member>
        <member name="T:CryEngine.ViewParams">
            <summary>
            View parameters, commonly used by <see cref="T:CryEngine.Actor"/> to update the active view.
            </summary>
        </member>
        <member name="F:CryEngine.ViewParams.Position">
            <summary>
            View position
            </summary>
        </member>
        <member name="F:CryEngine.ViewParams.Rotation">
            <summary>
            View orientation
            </summary>
        </member>
        <member name="F:CryEngine.ViewParams.LocalRotationLast">
            <summary>
            Previous local view orientation
            </summary>
        </member>
        <member name="F:CryEngine.ViewParams.NearPlane">
            <summary>
            custom near clipping plane, 0 means use engine defaults
            </summary>
        </member>
        <member name="F:CryEngine.ViewParams.FieldOfView">
            <summary>
            View field of view
            </summary>
        </member>
        <member name="T:CryEngine.GameRulesAttribute">
            <summary>
            Attribute used for specifying extra functionality for custom game rules classes.
            </summary>
        </member>
        <member name="P:CryEngine.GameRulesAttribute.Name">
            <summary>
            Sets the game mode's name. Uses the class name if not set.
            </summary>
        </member>
        <member name="P:CryEngine.GameRulesAttribute.Default">
            <summary>
            If set to true, the game mode will be set as default.
            </summary>
        </member>
        <member name="T:CryEngine.Sandbox.SandboxExtensionAttribute">
            <summary>
            Defines a Sandbox extension.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.SandboxExtensionAttribute.Name">
            <summary>
            The name of the extension.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.SandboxExtensionAttribute.Description">
            <summary>
            An optional description of the extension's purpose.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.SandboxExtensionAttribute.AuthorName">
            <summary>
            The name of the author.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.SandboxExtensionAttribute.AuthorContact">
            <summary>
            A method, such as a website or email address, to contact the extension developer.
            </summary>
        </member>
        <member name="T:CryEngine.CVarException">
            <summary>
            This exception is called when invalid CVar operations are performed.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.None">
            <summary>
            just to have one recognizable spot where the flags are located in the Register call
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Cheat">
            <summary>
            stays in the default state when cheats are disabled
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ReadOnly">
            <summary>
            can not be changed by the user
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WarningNotUsed">
            <summary>
             shows warning that this var was not used in config file
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CopyName">
            <summary>
            otherwise the const char * to the name will be stored without copying the memory
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Modified">
            <summary>
            Set when variable value modified.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.WasInConfig">
            <summary>
            Set when variable was present in config file.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Bitfield">
            <summary>
            Allow bitfield setting syntax.
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.RestrictedMode">
            <summary>
            is visible and usable in restricted (normal user) console mode
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.Invisible">
            <summary>
            Invisible to the user in console
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.AlwaysOnChange">
            <summary>
            Always accept variable value and call on change callback even if variable value didnt change
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.BlockFrame">
            <summary>
            Blocks the execution of console commands for one frame
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.ConstCVar">
            <summary>
            Set if it is a const cvar not to be set inside cfg-files
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatAlwaysCheck">
            <summary>
            This variable is critical to check in every hash, since it's extremely vulnerable
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.CheatNoCheck">
            <summary>
            This variable is set as VF_CHEAT but doesn't have to be checked/hashed since it's harmless to workaround
            </summary>
        </member>
        <member name="F:CryEngine.CVarFlags.NotNetSyncedInternal">
            <summary>
            can be changed on client and when connecting the var not sent to the client (is set for all vars in Game/scripts/Network/cvars.txt)
            </summary>
        </member>
        <member name="T:CryEngine.DynamicCVar">
            <summary>
            CVar created at run-time
            </summary>
        </member>
        <member name="M:CryEngine.CVar.Register(System.String,System.Int32,System.String,CryEngine.CVarFlags)">
            <summary>
            Registers a new console variable with the specified default value.
            </summary>
            <param name="name">console variable name</param>
            <param name="value">default value of the console variable</param>
            <param name="help">help text that is shown when you use <paramref name="name"/> ? in the console</param>
            <param name="flags"></param>
            <returns>Newly null if failed, new CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.Register(System.String,System.Single,System.String,CryEngine.CVarFlags)">
            <summary>
            Registers a new console variable with the specified default value.
            </summary>
            <param name="name">console variable name</param>
            <param name="value">default value of the console variable</param>
            <param name="help">help text that is shown when you use <paramref name="name"/> ? in the console</param>
            <param name="flags"></param>
            <returns>Newly null if failed, new CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.Register(System.String,System.String,System.String,CryEngine.CVarFlags)">
            <summary>
            Registers a new console variable with the specified default value.
            </summary>
            <param name="name">console variable name</param>
            <param name="value">default value of the console variable</param>
            <param name="help">help text that is shown when you use <paramref name="name"/> ? in the console</param>
            <param name="flags"></param>
            <returns>Newly null if failed, new CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.RegisterInt(System.String,System.Int32@,System.String,CryEngine.CVarFlags)">
            <summary>
            Registers a new console variable that will update the user defined integer.
            </summary>
            <param name="name">console variable name</param>
            <param name="value">reference to the memory that will be updated</param>
            <param name="help">help text that is shown when you use <paramref name="name"/> ? in the console</param>
            <param name="flags"></param>
            <returns>Newly null if failed, new CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.RegisterFloat(System.String,System.Single@,System.String,CryEngine.CVarFlags)">
            <summary>
            Registers a new console variable that will update the user defined float.
            </summary>
            <param name="name">console variable name</param>
            <param name="value">reference to the memory that will be updated</param>
            <param name="help">help text that is shown when you use <paramref name="name"/> ? in the console</param>
            <param name="flags"></param>
            <returns>Newly null if failed, new CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.Get(System.String)">
            <summary>
            Retrieve a console variable by name - not case sensitive
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <returns>null if not found, CVar instance if successful</returns>
        </member>
        <member name="M:CryEngine.CVar.TryGet(System.String,CryEngine.CVar@)">
            <summary>
            Firstly checks whether a specified CVar is valid, then if so, modifies the cvar reference
            </summary>
            <param name="name">The name of the CVar to retrieve</param>
            <param name="cvar">The CVar object to modify (usually blank)</param>
            <returns>True if the CVar exists, otherwise false</returns>
        </member>
        <member name="M:CryEngine.DynamicCVar.#ctor(System.String,System.Object,CryEngine.CVarFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.DynamicCVar"/> class.
            Used by CryConsole.RegisterCVar to construct the CVar.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="flags"></param>
            <param name="help"></param>
        </member>
        <member name="T:CryEngine.ExternalCVar">
            <summary>
            CVar created outside CryMono
            </summary>
        </member>
        <member name="T:CryEngine.StaticCVarField">
            <summary>
            CVar created using CVarAttribute, targeting a field.
            </summary>
        </member>
        <member name="T:CryEngine.StaticCVarProperty">
            <summary>
            CVar created using CVarAttribute, targeting a property.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.Id">
            <summary>
            Gets the unique identifier of this surface type.
            Maximum of 65535 simultaneous surface types can exist.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.Name">
            <summary>
            Gets the unique name of this surface type.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.TypeName">
            <summary>
            Gets the type name of this surface type.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.Flags">
            <summary>
            Gets flags assigned to this surface type.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.Parameters">
            <summary>
            Gets the parameters assigned to this surface type.
            </summary>
        </member>
        <member name="P:CryEngine.SurfaceType.Handle">
            <summary>
            Gets or sets the native ISurfaceType pointer.
            </summary>
        </member>
        <member name="T:CryEngine.EditorPropertyAttribute">
            <summary>
            Defines a property that is displayed and editable inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Min">
            <summary>
            Gets or sets the minimum value
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Max">
            <summary>
            Gets or sets the maximum value
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Type">
            <summary>
            Gets or sets the property type.
            Should be used for special types such as files.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Name">
            <summary>
            Gets or sets the name of the property, if not set the entity class name will be used.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Description">
            <summary>
            Gets or sets the description to display when the user hovers over this property inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EditorPropertyAttribute.Folder">
            <summary>
            Folder in which the entity property resides.
            If null, not contained in a folder.
            </summary>
        </member>
        <member name="T:CryEngine.EntityAttribute">
            <summary>
            Defines additional information used by the entity registration system.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Name">
            <summary>
            Gets or sets the Entity class name. Uses class name if not set.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.EditorHelper">
            <summary>
            Gets or sets the helper mesh displayed inside Sandbox.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Flags">
            <summary>
            Gets or sets the class flags for this entity.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Category">
            <summary>
            Gets or sets the category in which the entity will be placed.
            </summary>
        </member>
        <member name="P:CryEngine.EntityAttribute.Icon">
            <summary>
            Gets or sets the helper graphic displayed inside Sandbox.
            </summary>
        </member>
        <member name="T:CryEngine.EditorPropertyType">
            <summary>
            Defines the list of supported editor types.
            </summary>
        </member>
        <member name="F:CryEngine.EntityMoveFlags.FromParent">
            <summary>
            When parent changes his transformation.
            </summary>
        </member>
        <member name="T:CryEngine.Entity">
            <summary>
            Represents an entity created via CryMono.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.Spawn(System.String,System.Type,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3},System.Boolean,CryEngine.EntityFlags)">
            <summary>
            Spawns a new entity
            </summary>
            <param name="entityName"></param>
            <param name="type"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="autoInit"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.Spawn``1(System.String,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3},System.Boolean,CryEngine.EntityFlags)">
            <summary>
            Spawns a new entity
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityName"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="autoInit"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.Spawn(System.String,System.String,System.Nullable{CryEngine.Vec3},System.Nullable{CryEngine.Quat},System.Nullable{CryEngine.Vec3},System.Boolean,CryEngine.EntityFlags)">
            <summary>
            Spawns a new entity
            </summary>
            <param name="entityName"></param>
            <param name="className"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <param name="scale"></param>
            <param name="autoInit"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.Remove(CryEngine.EntityId,System.Boolean)">
            <summary>
            Removes the entity with the specified id.
            </summary>
            <param name="id"></param>
            <param name="forceRemoveNow"></param>
        </member>
        <member name="M:CryEngine.Entity.Get``1(CryEngine.EntityId)">
            <summary>
            Get an entity by its unique ID.
            </summary>
            <param name="entityId">The ID as an unsigned integer.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If the entity does not exist in the managed space, this function will attempt to find
            a C++ entity with the specified ID</remarks>
        </member>
        <member name="M:CryEngine.Entity.Get(CryEngine.EntityId)">
            <summary>
            Get an entity by its unique ID.
            </summary>
            <param name="entityId">The ID as an unsigned integer.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If the entity does not exist in the managed space, this function will attempt to find
            a C++ entity with the specified ID></remarks>
        </member>
        <member name="M:CryEngine.Entity.Find(System.String)">
            <summary>
            Get an entity by name.
            </summary>
            <param name="name">The name of the entity.</param>
            <returns>A reference to the entity.</returns>
            <remarks>If multiple entities have the same name, it will return the first found.
            Consider using IDs where necessary.</remarks>
        </member>
        <member name="M:CryEngine.Entity.GetByClass(System.String)">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <param name="className">The entity class to search for.</param>
            <returns>An array of entities.</returns>
        </member>
        <member name="M:CryEngine.Entity.GetByClass``1">
            <summary>
            Gets an array of entities that are of a given class.
            </summary>
            <typeparam name="T">The entity class to search for.</typeparam>
            <returns>An array of entities of type T.</returns>
        </member>
        <member name="M:CryEngine.Entity.GetInBox(CryEngine.BoundingBox,CryEngine.EntityQueryFlags)">
            <summary>
            Gets a list of entities within the specified area.
            </summary>
            <param name="bbox"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.GetInBox``1(CryEngine.BoundingBox,CryEngine.EntityQueryFlags)">
            <summary>
            Gets a list of entities within the specified area.
            </summary>
            <param name="bbox"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Entity.InternalInitialize(CryEngine.IScriptInitializationParams)">
            <summary>
            Initializes the entity, not recommended to set manually.
            </summary>
            <param name="initParams">Struct containing the IEntity pointer and EntityId.</param>
            <returns>IsEntityFlowNode</returns>
        </member>
        <member name="M:CryEngine.Entity.OnSpawn">
            <summary>
            This callback is called when this entity has finished spawning. The entity has been created and added to the list of entities.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnRemove">
            <summary>
            Called when the entity is being removed.
            </summary>
            <returns>True to allow removal, false to deny.</returns>
        </member>
        <member name="M:CryEngine.Entity.OnEditorReset(System.Boolean)">
            <summary>
            Called when resetting the state of the entity in Editor.
            </summary>
            <param name="enteringGame">true if currently entering gamemode, false if exiting.</param>
        </member>
        <member name="M:CryEngine.Entity.OnStartGame">
            <summary>
            Called when game is started (games may start multiple times)
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnStartLevel">
            <summary>
            Called when the level is started.
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnEnterArea(CryEngine.EntityId,System.Int32,System.Single)">
            <summary>
            Sent when entity enters to the area proximity.
            </summary>
            <param name="entityId"></param>
            <param name="areaEntityId"></param>
            <param name="fade"></param>
        </member>
        <member name="M:CryEngine.Entity.OnMoveInsideArea(CryEngine.EntityId,System.Int32,System.Single)">
            <summary>
            Sent when entity moves inside the area proximity.
            </summary>
            <param name="entityId"></param>
            <param name="areaId"></param>
            <param name="fade"></param>
        </member>
        <member name="M:CryEngine.Entity.OnLeaveArea(CryEngine.EntityId,System.Int32,System.Single)">
            <summary>
            Sent when entity leaves the area proximity.
            </summary>
            <param name="entityId"></param>
            <param name="areaEntityId"></param>
            <param name="fade"></param>
        </member>
        <member name="M:CryEngine.Entity.OnCollision(CryEngine.EntityId,CryEngine.Vec3,CryEngine.Vec3,System.Int16,CryEngine.Vec3)">
            <summary>
            Sent on entity collision.
            </summary>
            <param name="colliderId"></param>
            <param name="hitPos"></param>
            <param name="dir"></param>
            <param name="materialId"></param>
            <param name="contactNormal"></param>
        </member>
        <member name="M:CryEngine.Entity.OnInit">
            <summary>
            Called after level has been loaded, is not called on serialization.
            Note that this is called prior to GameRules.OnClientConnect and OnClientEnteredGame!
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnMove(CryEngine.EntityMoveFlags)">
            <summary>
            Called when the entities local or world transformation matrix changes. (Position / Rotation / Scale)
            </summary>
        </member>
        <member name="M:CryEngine.Entity.OnAttach(CryEngine.EntityId)">
            <summary>
            Called whenever another entity has been linked to this entity.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CryEngine.Entity.OnDetach(CryEngine.EntityId)">
            <summary>
            Called whenever another entity has been unlinked from this entity.
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:CryEngine.Entity.OnDetachThis(CryEngine.EntityId)">
            <summary>
            Called whenever this entity is unliked from another entity.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:CryEngine.Entity.OnPropertyChanged(System.Reflection.MemberInfo,CryEngine.EditorPropertyType,System.Object)">
            <summary>
            Called when the user changes a property from within the Editor.
            </summary>
            <param name="memberInfo"></param>
            <param name="propertyType"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:CryEngine.Entity.InvalidateTrigger">
            <summary>
            Invalidate the TriggerBounds, so it gets recalculated and catches things which are already inside when it gets enabled.
            </summary>
        </member>
        <member name="P:CryEngine.Entity.TriggerBounds">
            <summary>
            Set to detect movement within an area. 
            See OnEnterArea, OnMoveInsideArea, OnLeaveArea, OnEnterNearArea, OnLeaveNearArea and OnMoveNearArea
            </summary>
        </member>
        <member name="M:CryEngine.FlowSystem.FlowNode.OnPortActivated(System.Int32,System.Object)">
            <summary>
            Called if one or more input ports have been activated.
            </summary>
        </member>
        <member name="M:CryEngine.FlowSystem.FlowNode.OnInit">
            <summary>
            Called after level has been loaded, is not called on serialization.
            Note that this is called prior to GameRules.OnClientConnect and OnClientEnteredGame!
            </summary>
        </member>
        <member name="P:CryEngine.EntityLink.Handle">
            <summary>
            Native IEntityLink handle
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.Never">
            <summary>
            Never update entity every frame.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.InRange">
            <summary>
            Only update entity if it is in specified range from active camera.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.PotentiallyVisible">
            <summary>
            Only update entity if it is potentially visible.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.Visible">
            <summary>
            Only update entity if it is visible.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.Physics">
            <summary>
            Only update entity if it is need to be updated due to physics.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.PhysicsVisible">
            <summary>
            Only update entity if it is need to be updated due to physics or if it is visible.
            </summary>
        </member>
        <member name="F:CryEngine.EntityUpdatePolicy.Always">
            <summary>
            Always update entity every frame.
            </summary>
        </member>
        <member name="T:CryEngine.Attachment">
            <summary>
            Represents a character attachment, obtained via <see cref="M:CryEngine.EntityBase.GetAttachment(System.Int32,System.Int32)"/> and <see cref="M:CryEngine.EntityBase.GetAttachment(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:CryEngine.Attachment.Owner">
            <summary>
            Gets the entity this attachment is attached to.
            </summary>
        </member>
        <member name="P:CryEngine.Attachment.UseEntityPosition">
            <summary>
            Gets or sets a value indicating whether to automatically position the attachment object.
            </summary>
        </member>
        <member name="P:CryEngine.Attachment.UseEntityRotation">
            <summary>
            Gets or sets a value indicating whether to automatically rotate the attachment object.
            </summary>
        </member>
        <member name="P:CryEngine.Attachment.EntityAttachmentHandle">
            <summary>
            Gets or sets CMonoEntityAttachment *
            </summary>
        </member>
        <member name="P:CryEngine.Attachment.AttachmentHandle">
            <summary>
            Gets or sets IAttachment *
            </summary>
        </member>
        <member name="T:CryEngine.EntityRemovalException">
            <summary>
            Thrown when an entity is attempted to be removed improperly.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFilter.Approved">
            <summary>
            This node is approved for designers
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFilter.Advanced">
            <summary>
            This node is slightly advanced and approved.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFilter.Debug">
            <summary>
            This node is for debug purpose only.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFilter.Obsolete">
            <summary>
            This node is obsolete and is not available in the editor.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFlags.TargetEntity">
            <summary>
            This node targets an entity, entity id must be provided.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFlags.HideUI">
            <summary>
            This node cannot be selected by user for placement in flow graph UI.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFlags.DynamicOutput">
            <summary>
            This node is setup for dynamic output port growth in runtime.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeFlags.Unremovable">
            <summary>
            This node cannot be deleted by the user.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeType.Singleton">
            <summary>
            Node has only one instance, never cloned.
            </summary>
        </member>
        <member name="F:CryEngine.FlowSystem.FlowNodeType.Instanced">
            <summary>
            New instance of node will be created each time it is requested.
            </summary>
        </member>
        <member name="T:CryEngine.FlowSystem.OutputPort">
            <summary>
            Used to declare flownode output ports that can output any or no value.
            </summary>
        </member>
        <member name="T:CryEngine.FlowSystem.OutputPort`1">
            <summary>
            Used to declare flownode output ports of a specified type.
            </summary>
            <typeparam name="T">Int, Float, EntityId, String, Bool or Vec3.</typeparam>
        </member>
        <member name="P:CryEngine.FlowSystem.PortAttribute.StringPortType">
            <summary>
            Only to be used for string ports
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.OnPress">
            <summary>
            Used when the action key is pressed
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.OnRelease">
            <summary>
            Used when the action key is released
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.OnHold">
            <summary>
            Used when the action key is held
            </summary>
        </member>
        <member name="F:CryEngine.KeyEvent.AnalogCmd">
            <summary>
            Used when analog compare op succeeds
            </summary>
        </member>
        <member name="T:CryEngine.SerializableInput">
            <summary>
            Used to cross over input data for realtime scripting.
            </summary>
        </member>
        <member name="T:CryEngine.Collision">
            <summary>
            Contains static methods to help in determining intersections, containment, etc.
            </summary>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointPointTriangle(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a point and a triangle.
            </summary>
            <param name="point">The point to test.</param>
            <param name="vertex1">The first vertex to test.</param>
            <param name="vertex2">The second vertex to test.</param>
            <param name="vertex3">The third vertex to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointPlanePoint(CryEngine.Plane@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointBoxPoint(CryEngine.BoundingBox@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointSpherePoint(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere"></param>
            <param name="point">The point to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="T:CryEngine.Vec3"/>.</param>
        </member>
        <member name="M:CryEngine.Collision.ClosestPointSphereSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines the closest point between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <param name="result">When the method completes, contains the closest point between the two objects;
            or, if the point is directly in the center of the sphere, contains <see cref="T:CryEngine.Vec3"/>.</param>
            <remarks>
            If the two spheres are overlapping, but not directly ontop of each other, the closest point
            is the 'closest' point of intersection. This can also be considered is the deepest point of
            intersection.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.DistancePlanePoint(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceBoxPoint(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingBox"/> and a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceBoxBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceSpherePoint(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingSphere"/> and a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.DistanceSphereSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines the distance between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The distance between the two objects.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPoint(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a point.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsRay(CryEngine.Ray@,CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray1">The first ray to test.</param>
            <param name="ray2">The second ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
            <remarks>
            This method performs a ray vs ray intersection test based on the following formula
            from Goldman.
            <code>s = det([o_2 - o_1, d_2, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            <code>t = det([o_2 - o_1, d_1, d_1 x d_2]) / ||d_1 x d_2||^2</code>
            Where o_1 is the position of the first ray, o_2 is the position of the second ray,
            d_1 is the normalized direction of the first ray, d_2 is the normalized direction
            of the second ray, det denotes the determinant of a matrix, x denotes the cross
            product, [ ] denotes a matrix, and || || denotes the length or magnitude of a vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPlane(CryEngine.Ray@,CryEngine.Plane@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersect.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsPlane(CryEngine.Ray@,CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="plane">The plane to test</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsTriangle(CryEngine.Ray@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            This method tests if the ray intersects either the front or back of the triangle.
            If the ray is parallel to the triangle's plane, no intersection is assumed to have
            happened. If the intersection of the ray and the triangle is behind the origin of
            the ray, no intersection is assumed to have happened. In both cases of assumptions,
            this method returns false.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsTriangle(CryEngine.Ray@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a triangle.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsBox(CryEngine.Ray@,CryEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsBox(CryEngine.Ray@,CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsSphere(CryEngine.Ray@,CryEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.RayIntersectsSphere(CryEngine.Ray@,CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Ray"/> and a <see cref="T:CryEngine.BoundingSphere"/>. 
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPoint(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a point.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPlane(CryEngine.Plane@,CryEngine.Plane@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsPlane(CryEngine.Plane@,CryEngine.Plane@,CryEngine.Ray@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane1">The first plane to test.</param>
            <param name="plane2">The second plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:CryEngine.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
            <remarks>
            Although a ray is set to have an origin, the ray returned by this method is really
            a line in three dimensions which has no real origin. The ray is considered valid when
            both the positive direction is used and when the negative direction is used.
            </remarks>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsTriangle(CryEngine.Plane@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a triangle.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsBox(CryEngine.Plane@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.PlaneIntersectsSphere(CryEngine.Plane@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.Plane"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxIntersectsBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxIntersectsSphere(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingBox"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereIntersectsTriangle(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingSphere"/> and a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereIntersectsSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether there is an intersection between a <see cref="T:CryEngine.BoundingSphere"/> and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">First sphere to test.</param>
            <param name="sphere2">Second sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsPoint(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a point.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsBox(CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box1">The first box to test.</param>
            <param name="box2">The second box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.BoxContainsSphere(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingBox"/> contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsPoint(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a point.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsTriangle(CryEngine.BoundingSphere@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a triangle.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsBox(CryEngine.BoundingSphere@,CryEngine.BoundingBox@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.Collision.SphereContainsSphere(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Determines whether a <see cref="T:CryEngine.BoundingSphere"/> contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere1">The first sphere to test.</param>
            <param name="sphere2">The second sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="T:CryEngine.Plane">
            <summary>
            Represents a plane in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="F:CryEngine.Plane.D">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="a">The X component of the normal.</param>
            <param name="b">The Y component of the normal.</param>
            <param name="c">The Z component of the normal.</param>
            <param name="d">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="value">The normal of the plane.</param>
            <param name="d">The distance of the plane along its normal from the origin</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="point1">First point of a triangle defining the plane.</param>
            <param name="point2">Second point of a triangle defining the plane.</param>
            <param name="point3">Third point of a triangle defining the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Plane"/> struct.
            </summary>
            <param name="values">The values to assign to the A, B, C, and D components of the plane. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:CryEngine.Plane.Multiply(CryEngine.Plane@,System.Single,CryEngine.Plane@)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Multiply(CryEngine.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Scale(CryEngine.Plane@,System.Single,CryEngine.Plane@)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="result">When the method completes, contains the scaled plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Scale(CryEngine.Plane,System.Single)">
            <summary>
            Scales the distance component of the plane by the given scaling factor.
            </summary>
            <param name="value">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Dot(CryEngine.Plane@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified plane and vector.</param>
        </member>
        <member name="M:CryEngine.Plane.Dot(CryEngine.Plane,CryEngine.Vec4)">
            <summary>
            Calculates the dot product of the specified vector and plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified plane and vector.</returns>
        </member>
        <member name="M:CryEngine.Plane.DotCoordinate(CryEngine.Plane@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.DotCoordinate(CryEngine.Plane,CryEngine.Vec3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of a specified vector and the normal of the Plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.DotNormal(CryEngine.Plane@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <param name="result">When the method completes, contains the dot product of the specified vector and the normal of the plane.</param>
        </member>
        <member name="M:CryEngine.Plane.DotNormal(CryEngine.Plane,CryEngine.Vec3)">
            <summary>
            Calculates the dot product of the specified vector and the normal of the plane.
            </summary>
            <param name="left">The source plane.</param>
            <param name="right">The source vector.</param>
            <returns>The dot product of the specified vector and the normal of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Normalize(CryEngine.Plane@,CryEngine.Plane@)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <param name="result">When the method completes, contains the normalized plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Normalize(CryEngine.Plane)">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
            <param name="plane">The source plane.</param>
            <returns>The normalized plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane@,CryEngine.Quat@,CryEngine.Plane@)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <param name="result">When the method completes, contains the transformed plane.</param>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane,CryEngine.Quat)">
            <summary>
            Transforms a normalized plane by a quaternion rotation.
            </summary>
            <param name="plane">The normalized source plane.</param>
            <param name="rotation">The quaternion rotation.</param>
            <returns>The transformed plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Transform(CryEngine.Plane[],CryEngine.Quat@)">
            <summary>
            Transforms an array of normalized planes by a quaternion rotation.
            </summary>
            <param name="planes">The array of normalized planes to transform.</param>
            <param name="rotation">The quaternion rotation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="planes"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.Plane.op_Multiply(System.Single,CryEngine.Plane)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="scale">The amount by which to scale the plane.</param>
            <param name="plane">The plane to scale.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Multiply(CryEngine.Plane,System.Single)">
            <summary>
            Scales each component of the plane by the given value.
            </summary>
            <param name="plane">The plane to scale.</param>
            <param name="scale">The amount by which to scale the plane.</param>
            <returns>The scaled plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Equality(CryEngine.Plane,CryEngine.Plane)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Plane.op_Inequality(CryEngine.Plane,CryEngine.Plane)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Plane.Normalize">
            <summary>
            Changes the coefficients of the normal vector of the plane to make it of unit length.
            </summary>
        </member>
        <member name="M:CryEngine.Plane.ToArray">
            <summary>
            Creates an array containing the elements of the plane.
            </summary>
            <returns>A four-element array containing the components of the plane.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Plane@,CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="line">When the method completes, contains the line of intersection
            as a <see cref="T:CryEngine.Ray"/>, or a zero ray if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Plane.Equals(CryEngine.Plane)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="T:CryEngine.PlaneIntersectionType">
            <summary>
            Describes the result of an intersection with a plane in three dimensions.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Back">
            <summary>
            The object is behind the plane.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Front">
            <summary>
            The object is in front of the plane.
            </summary>
        </member>
        <member name="F:CryEngine.PlaneIntersectionType.Intersecting">
            <summary>
            The object is intersecting the plane.
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.slot">
            <summary>
            Index of object slot, -1 if all slots should be used.
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.density">
            <summary>
            Only one either density or mass must be set, parameter set to 0 is ignored.
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.lod">
            <summary>
            When physicalizing geometry can specify to use physics from different LOD.
            Used for characters that have ragdoll physics in Lod1
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.attachToEntity">
            <summary>
            Physical entity to attach this physics object (Only for Soft physical entity).
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.attachToPart">
            <summary>
            Part ID in entity to attach to (Only for Soft physical entity).
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.stiffnessScale">
            <summary>
            Used for character physicalization (Scale of force in character joint's springs).
            </summary>
        </member>
        <member name="F:CryEngine.Physics.PhysicalizationParams.copyJointVelocities">
            <summary>
            Copy joints velocities when converting a character to ragdoll.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.Status.DynamicsPhysicsStatus.CenterOfMass">
            <summary>
            The center of mass / pivot point for this entity.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.Status.DynamicsPhysicsStatus.SubmergedFraction">
            <summary>
            Percentage of the entity that is underwater. (0 - 1)
            </summary>
        </member>
        <member name="F:CryEngine.Physics.Status.LivingPhysicsStatus.bFlying">
            <summary>
            whether entity has no contact with ground
            </summary>
        </member>
        <member name="P:CryEngine.Physics.Status.LivingPhysicsStatus.FlyTime">
            <summary>
             for how long the entity was flying
            </summary>
        </member>
        <member name="P:CryEngine.Physics.Status.LivingPhysicsStatus.GroundVelocity">
            <summary>
            velocity of the object entity is standing on
            </summary>
        </member>
        <member name="P:CryEngine.Physics.Status.LivingPhysicsStatus.GroundHeight">
            <summary>
            position where the last contact with the ground occured
            </summary>
        </member>
        <member name="M:CryEngine.Native.NativeScriptSystemMethods.RevertAppDomain">
            <summary>
            Revert the last script reload attempt.
            </summary>
        </member>
        <member name="M:CryEngine.Native.NativeScriptSystemMethods.ReloadAppDomain">
            <summary>
            Attempt to reload scripts again
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.EntityRegistrationParams.propertyFolders">
            <summary>
            EntityPropertyFolder array containing properties.
            The first index contains a fake folder which is referred to as the default category.
            </summary>
        </member>
        <member name="T:CryEngine.ScriptInstanceDestroyedException">
            <summary>
            Thrown when attempting to invoke native methods on a destroyed entity.
            See <see cref="P:CryEngine.CryScriptInstance.IsDestroyed"/>
            </summary>
        </member>
        <member name="T:CryEngine.QuatT">
            <summary>
            Quaternion with a translation vector
            </summary>
        </member>
        <member name="F:CryEngine.QuatT.Q">
            <summary>
            The quaternion
            </summary>
        </member>
        <member name="F:CryEngine.QuatT.T">
            <summary>
            The translation vector and a scalar (for uniform scaling?)
            </summary>
        </member>
        <member name="T:CryEngine.RemoteInvocationException">
            <summary>
            Thrown when an error related to a remote invocation (see <see cref="T:CryEngine.RemoteInvocationAttribute"/>) is caught.
            </summary>
        </member>
        <member name="F:CryEngine.Utilities.ProjectSettings.BugReportLink">
            <summary>
            Designates what link will be opened when the user presses 'Report Bug' in the exception form.
            </summary>
        </member>
        <member name="F:CryEngine.Utilities.ProjectSettings.ExceptionMessage">
            <summary>
            Message displayed in the exception form when an exception has been thrown.
            </summary>
        </member>
        <member name="T:CryEngine.AnimationFlags">
            <summary>
            Flags used when playing animations.
            </summary>
        </member>
        <member name="F:CryEngine.AnimationFlags.CleanBending">
            <summary>
            Attempt clean animation blending.
            </summary>
        </member>
        <member name="F:CryEngine.AnimationFlags.NoBlend">
            <summary>
            Don't blend with other animations
            </summary>
        </member>
        <member name="F:CryEngine.AnimationFlags.RestartAnimation">
            <summary>
            Restart animation after finishing.
            </summary>
        </member>
        <member name="F:CryEngine.AnimationFlags.RepeatLastFrame">
            <summary>
            Repeat the last frame.
            </summary>
        </member>
        <member name="F:CryEngine.AnimationFlags.Loop">
            <summary>
            Loop this animation
            </summary>
        </member>
        <member name="T:CryEngine.NativeActor">
            <summary>
            Represents an actor with a custom IActor implementation outside of CryMono.dll.
            </summary>
        </member>
        <member name="T:CryEngine.Async.Jobs.AsyncJob`1">
            <summary>
            Base class for any async job
            </summary>
        </member>
        <member name="T:CryEngine.Async.Jobs.IAsyncJob">
            <summary>
            An asynchronous job
            </summary>
        </member>
        <member name="M:CryEngine.Async.Jobs.IAsyncJob.Update(System.Single)">
            <summary>
            Updates the job
            </summary>
            <param name="frameTime"></param>
        </member>
        <member name="P:CryEngine.Async.Jobs.IAsyncJob.Task">
            <summary>
            Gets the internal Task object associated with the job
            </summary>
        </member>
        <member name="P:CryEngine.Async.Jobs.IAsyncJob.IsFinished">
            <summary>
            Gets a value indicating whether the job has finished processing
            </summary>
        </member>
        <member name="M:CryEngine.Async.Jobs.AsyncJob`1.Update(System.Single)">
            <summary>
            Updates the job
            </summary>
            <param name="frameTime"></param>
        </member>
        <member name="P:CryEngine.Async.Jobs.AsyncJob`1.Task">
            <summary>
            Gets the underlying System.Threading.Tasks.Task object
            </summary>
        </member>
        <member name="P:CryEngine.Async.Jobs.AsyncJob`1.IsFinished">
            <summary>
            Gets or sets a value indicating whether if the job has finished executing
            </summary>
        </member>
        <member name="T:CryEngine.Async.Awaiter">
            <summary>
            Class that manages all jobs (updating, removing)
            </summary>
        </member>
        <member name="M:CryEngine.Async.Awaiter.OnUpdate(System.Single)">
            <summary>
            Updates all scheduled jobs
            </summary>
            <param name="frameTime"></param>
        </member>
        <member name="P:CryEngine.Async.Awaiter.Instance">
            <summary>
            Gets or sets the singleton instance of the awaiter
            </summary>
        </member>
        <member name="P:CryEngine.Async.Awaiter.Jobs">
            <summary>
            Gets a list of all jobs scheduled to be executed on the next OnUpdate call
            </summary>
        </member>
        <member name="T:CryEngine.Delay">
            <summary>
            Utility class that provides async methods for common operations
            </summary>
        </member>
        <member name="M:CryEngine.Delay.CreateTaskFromJob(CryEngine.Async.Jobs.IAsyncJob)">
            <summary>
            Creates a Task object from an IAsyncJob instance
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:CryEngine.Delay.FrameDelay(System.Int32)">
            <summary>
            Delays execution for a number of frames
            </summary>
            <param name="numFrames"></param>
        </member>
        <member name="M:CryEngine.Delay.TimeDelay(System.TimeSpan)">
            <summary>
            Delays execution for a supplied time amount
            </summary>
            <param name="delay"></param>
        </member>
        <member name="M:CryEngine.Delay.TimeDelay(System.Single)">
            <summary>
            Delays execution for a supplied time amount (in milliseconds)
            </summary>
            <param name="delayInMilliseconds"></param>
        </member>
        <member name="T:CryEngine.Async.Jobs.FrameDelayJob">
            <summary>
            Delays execution for a number of frames
            </summary>
        </member>
        <member name="M:CryEngine.Async.Jobs.FrameDelayJob.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Async.Jobs.FrameDelayJob"/> class.
            </summary>
            <param name="numberOfFramesToWait"></param>
        </member>
        <member name="P:CryEngine.Async.Jobs.FrameDelayJob.FramesToWait">
            <summary>
            Gets or sets the number of frames to wait
            </summary>
        </member>
        <member name="T:CryEngine.Async.Jobs.TimeDelayJob">
            <summary>
            Delays for a time period
            </summary>
        </member>
        <member name="M:CryEngine.Async.Jobs.TimeDelayJob.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Async.Jobs.TimeDelayJob"/> class.
            </summary>
            <param name="milliseconds"></param>
        </member>
        <member name="M:CryEngine.Async.Jobs.TimeDelayJob.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Async.Jobs.TimeDelayJob"/> class.
            </summary>
            <param name="delay"></param>
        </member>
        <member name="P:CryEngine.Async.Jobs.TimeDelayJob.DelayInMilliseconds">
            <summary>
            Gets or sets the delay in milliseconds
            </summary>
        </member>
        <member name="T:CryEngine.Level">
            <summary>
            Represents a CryENGINE level.
            </summary>
        </member>
        <member name="M:CryEngine.Level.Load(System.String)">
            <summary>
            Loads a new level and returns its level info
            </summary>
            <param name="name"></param>
            <returns>The loaded level</returns>
        </member>
        <member name="M:CryEngine.Level.Unload">
            <summary>
            Unloads the currently loaded level.
            </summary>
        </member>
        <member name="M:CryEngine.Level.GetSupportedGameRules(System.Int32)">
            <summary>
            Gets the supported game rules at the index; see SupportedGamerules.
            </summary>
            <param name="index"></param>
            <returns>Name of the supported gamemode</returns>
        </member>
        <member name="M:CryEngine.Level.SupportsGameRules(System.String)">
            <summary>
            Returns true if this level supports the specific game rules.
            </summary>
            <param name="gamemodeName"></param>
            <returns>A boolean indicating whether the specified gamemode is supported.</returns>
        </member>
        <member name="P:CryEngine.Level.Current">
            <summary>
            Gets the currently loaded level
            </summary>
        </member>
        <member name="P:CryEngine.Level.Loaded">
            <summary>
            Gets a value indicating whether a level is currently loaded.
            </summary>
        </member>
        <member name="P:CryEngine.Level.Name">
            <summary>
            Gets the level name.
            </summary>
        </member>
        <member name="P:CryEngine.Level.DisplayName">
            <summary>
            Gets the level display name.
            </summary>
        </member>
        <member name="P:CryEngine.Level.Path">
            <summary>
            Gets the full path to the directory this level resides in.
            </summary>
        </member>
        <member name="P:CryEngine.Level.HeightmapSize">
            <summary>
            Gets the heightmap size for this level.
            </summary>
        </member>
        <member name="P:CryEngine.Level.SupportedGamerules">
            <summary>
            Gets the number of supported game rules for this level.
            </summary>
        </member>
        <member name="P:CryEngine.Level.DefaultGameRules">
            <summary>
            Gets the default gamemode for this level.
            </summary>
        </member>
        <member name="P:CryEngine.Level.HasGameRules">
            <summary>
            Gets a value indicating whether the level is configured to support any game rules.
            </summary>
        </member>
        <member name="M:CryEngine.TimeOfDay.GetMinutes(System.Single)">
            <summary>
            Gets the minute value from a CE-style time float
            </summary>
            <param name="cryTime"></param>
            <returns>Specified timespan in minutes</returns>
        </member>
        <member name="M:CryEngine.TimeOfDay.GetHours(System.Single)">
            <summary>
            Gets the hour value from a CE-style time float
            </summary>
            <param name="cryTime"></param>
            <returns>Specified timespan in hours</returns>
        </member>
        <member name="M:CryEngine.TimeOfDay.CreateEngineTime(System.Int32,System.Int32)">
            <summary>
            Creates a CE-style time from a given number of hours and minutes
            </summary>
            <param name="hours"></param>
            <param name="mins"></param>
            <returns>Engine time</returns>
        </member>
        <member name="P:CryEngine.TimeOfDay.ForceUpdates">
            <summary>
            Gets or sets a value indicating whether Time of Day updates take effect immediately.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.Hour">
            <summary>
            Gets or sets the hour value for the Time of Day system.
            The value is wrapped, so setting the value to 24 will reset the hour to zero.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.Minute">
            <summary>
            Gets or sets the minute value for the Time of Day system.
            The value is wrapped, so setting the value to 60 will increment the hour and reset the minutes to zero.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.StartTime">
            <summary>
            Gets or sets the start time for the currently loaded time of day.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.EndTime">
            <summary>
            Gets or sets the end time for the currently loaded time of day.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.Speed">
            <summary>
            Gets or sets the speed at which the Time of Day passes.
            </summary>
        </member>
        <member name="P:CryEngine.TimeOfDay.RawEngineTime">
            <summary>
            Gets or sets the raw engine time.
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.Name">
            <summary>
            Gets or sets the name of the node, if not set will use the node class name.
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.Category">
            <summary>
            Gets or sets the category in which the node will appear when right-clicking in the Flowgraph Editor.
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.Filter">
            <summary>
            Gets or sets the Sandbox filtering category
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.Type">
            <summary>
            Gets or sets how the node is cloned.
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.Description">
            <summary>
            Gets or sets the node description
            </summary>
        </member>
        <member name="P:CryEngine.FlowSystem.FlowNodeAttribute.TargetsEntity">
            <summary>
            Gets or sets whether this node targets an entity. See <see cref="P:CryEngine.FlowSystem.FlowNode.TargetEntity"/>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`10.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8,`9},System.Single,`0,`1,`2,`3,`4,`5,`6,`7,`8,`9)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`9.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7,`8},System.Single,`0,`1,`2,`3,`4,`5,`6,`7,`8)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`8.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6,`7},System.Single,`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`7.#ctor(System.Action{`0,`1,`2,`3,`4,`5,`6},System.Single,`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`6.#ctor(System.Action{`0,`1,`2,`3,`4,`5},System.Single,`0,`1,`2,`3,`4,`5)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`5.#ctor(System.Action{`0,`1,`2,`3,`4},System.Single,`0,`1,`2,`3,`4)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`4.#ctor(System.Action{`0,`1,`2,`3},System.Single,`0,`1,`2,`3)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`3.#ctor(System.Action{`0,`1,`2},System.Single,`0,`1,`2)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`2.#ctor(System.Action{`0,`1},System.Single,`0,`1)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc`1.#ctor(System.Action{`0},System.Single,`0)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.DelayedFunc.#ctor(System.Action,System.Single)">
            <summary>
            </summary>
        </member>
        <member name="M:CryEngine.Extensions.WinFormsExtensions.Append(System.Windows.Forms.TextBoxBase,System.String,System.Object[])">
            <summary>
            Appends text to the current text of a text box, with formatted arguments.
            </summary>
            <param name="textBox"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Extensions.WinFormsExtensions.NewLine(System.Windows.Forms.TextBoxBase,System.Int32)">
            <summary>
            Appends a number of Environment.NewLine strings to the current text of a text box.
            </summary>
            <param name="textBox"></param>
            <param name="count"></param>
        </member>
        <member name="M:CryEngine.Extensions.WinFormsExtensions.ScrollTo(System.Windows.Forms.TextBoxBase,System.Int32)">
            <summary>
            Scrolls the contents of the text box to the given position.
            The value is clamped to the length of the text.
            </summary>
            <param name="textBox"></param>
            <param name="position"></param>
        </member>
        <member name="T:CryEngine.NetworkTarget">
            <summary>
            Flags indicating what a remote invocation targets.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToClientChannel">
            <summary>
            Target a specific client channel.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToOwnClient">
            <summary>
            Target the local client.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToOtherClients">
            <summary>
            Target all clients but the local one.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToAllClients">
            <summary>
            Target all clients.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToServer">
            <summary>
            Target the server.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.NoLocalCalls">
            <summary>
            No local calls.
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.NoRemoteCalls">
            <summary>
            No remote calls
            </summary>
        </member>
        <member name="F:CryEngine.NetworkTarget.ToRemoteClients">
            <summary>
            To all remote clients
            </summary>
        </member>
        <member name="F:CryEngine.Sandbox.FormLoader.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CryEngine.Sandbox.FormLoader.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CryEngine.Sandbox.FormLoader.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CryEngine.Sandbox.FormInfo">
            <summary>
            Describes an available Sandbox extension.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.FormInfo.Type">
            <summary>
            The type of the form, guaranteed to inherit from System.Windows.Forms.Form.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.FormInfo.Name">
            <summary>
            The name of the extension.
            </summary>
        </member>
        <member name="P:CryEngine.Sandbox.FormInfo.Data">
            <summary>
            Extension metadata such as author info.
            </summary>
        </member>
        <member name="T:CryEngine.Initialization.CryScript">
            <summary>
            Represents a given class.
            </summary>
        </member>
        <member name="P:CryEngine.Initialization.CryScript.ScriptName">
            <summary>
            The script's name, not always type name!
            </summary>
        </member>
        <member name="P:CryEngine.Initialization.CryScript.ScriptInstances">
            <summary>
            Stores all instances of this class.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Any">
            <summary>
            All scripts have this flag applied.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.CryScriptInstance">
            <summary>
            Scripts deriving from CryScriptInstance.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.GameRules">
            <summary>
            Scripts deriving from GameRules.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.FlowNode">
            <summary>
            Scripts deriving from FlowNode.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Entity">
            <summary>
            Scripts deriving from EntityBase.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.Actor">
            <summary>
            Scripts deriving from Actor.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptType.EntityFlowNode">
            <summary>
            Scripts deriving from EntityFlowNode.
            </summary>
        </member>
        <member name="F:CryEngine.ExceptionMessage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CryEngine.ExceptionMessage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CryEngine.ExceptionMessage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CryEngine.Initialization.ScriptCompiler">
            <summary>
            Represents a custom script compiler.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptCompiler.ValidateCompilation(System.CodeDom.Compiler.CompilerResults)">
            <summary>
            Validates that a compilation has been successful.
            </summary>
            <param name="results">The results of the compilation that you wish to validate</param>
            <returns>The resulting assembly, if no errors are found.</returns>
        </member>
        <member name="T:CryEngine.Material">
            <summary>
            Represents a CryENGINE material applicable to any ingame object or entity.
            </summary>
        </member>
        <member name="M:CryEngine.Material.GetSubmaterial(System.Int32)">
            <summary>
            Gets a submaterial by slot.
            </summary>
            <param name="slot"></param>
            <returns>The submaterial, or null if failed.</returns>
        </member>
        <member name="M:CryEngine.Material.Clone(System.Int32)">
            <summary>
            Clones a material
            </summary>
            <param name="subMaterial">If negative, all sub materials are cloned, otherwise only the specified slot is</param>
            <returns>The new clone.</returns>
        </member>
        <member name="M:CryEngine.Material.SetParam(System.String,System.Single)">
            <summary>
            Sets a material parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.Material.GetParam(System.String)">
            <summary>
            Gets a material's parameter value by name.
            </summary>
            <param name="paramName"></param>
            <returns>The param value</returns>
        </member>
        <member name="M:CryEngine.Material.TryGetParam(System.String,System.Single@)">
            <summary>
            Attempts to get parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.Material.SetParam(System.String,CryEngine.Color)">
            <summary>
            Sets a material parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.Material.GetParamColor(System.String)">
            <summary>
            Gets a material's parameter value by name.
            </summary>
            <param name="paramName"></param>
            <returns>The color value</returns>
        </member>
        <member name="M:CryEngine.Material.TryGetParam(System.String,CryEngine.Color@)">
            <summary>
            Attempts to get parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
            <returns>true if successful, otherwise false.</returns>
        </member>
        <member name="M:CryEngine.Material.SetShaderParam(System.String,System.Single)">
            <summary>
            Sets a shader parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="newVal"></param>
        </member>
        <member name="M:CryEngine.Material.SetShaderParam(CryEngine.ShaderFloatParameter,System.Single)">
            <summary>
            Sets a shader parameter value by name.
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:CryEngine.Material.SetShaderParam(System.String,CryEngine.Color)">
            <summary>
            Sets a shader parameter value by name.
            </summary>
            <param name="paramName"></param>
            <param name="newVal"></param>
        </member>
        <member name="M:CryEngine.Material.SetShaderParam(CryEngine.ShaderColorParameter,CryEngine.Color)">
            <summary>
            Sets a shader parameter value by name.
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:CryEngine.Material.SetShaderParam(CryEngine.ShaderColorParameter,CryEngine.Vec3)">
            <summary>
            Sets a shader parameter value by name.
            </summary>
            <param name="param"></param>
            <param name="value"></param>
        </member>
        <member name="M:CryEngine.Material.GetShaderParamName(System.Int32)">
            <summary>
            Gets a shader parameter name by index.
            See <see cref="P:CryEngine.Material.ShaderParamCount"/>
            </summary>
            <param name="index"></param>
            <returns>The shader parameter name.</returns>
        </member>
        <member name="P:CryEngine.Material.AlphaTest">
            <summary>
            Gets or sets the alphatest.
            </summary>
        </member>
        <member name="P:CryEngine.Material.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
        </member>
        <member name="P:CryEngine.Material.Glow">
            <summary>
            Gets or sets the glow.
            </summary>
        </member>
        <member name="P:CryEngine.Material.Shininess">
            <summary>
            Gets or sets the shininess.
            </summary>
        </member>
        <member name="P:CryEngine.Material.DiffuseColor">
            <summary>
            Gets or sets the diffuse color.
            </summary>
        </member>
        <member name="P:CryEngine.Material.EmissiveColor">
            <summary>
            Gets or sets the emissive color.
            </summary>
        </member>
        <member name="P:CryEngine.Material.SpecularColor">
            <summary>
            Gets or sets the specular color.
            </summary>
        </member>
        <member name="P:CryEngine.Material.SurfaceType">
            <summary>
            Gets the surface type assigned to this material.
            </summary>
        </member>
        <member name="P:CryEngine.Material.ShaderParamCount">
            <summary>
            Gets the amount of shader parameters in this material.
            See <see cref="M:CryEngine.Material.GetShaderParamName(System.Int32)"/>
            </summary>
        </member>
        <member name="P:CryEngine.Material.SubmaterialCount">
            <summary>
            Gets the amount of submaterials tied to this material.
            </summary>
        </member>
        <member name="P:CryEngine.Material.Handle">
            <summary>
            Gets or sets the native IMaterial pointer.
            </summary>
        </member>
        <member name="M:CryEngine.ParticleEffect.Get(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="effectName"></param>
            <param name="loadResources">Load all required resources?</param>
            <returns>The specified particle effect, or null if failed.</returns>
        </member>
        <member name="M:CryEngine.ParticleEffect.Spawn(CryEngine.Vec3,System.Nullable{CryEngine.Vec3},System.Single,System.Boolean)">
            <summary>
            Spawns this effect
            </summary>
            <param name="independent"></param>
            <param name="pos">World location to place emitter at.</param>
            <param name="dir">World rotation of emitter, set to Vec3.Up if null.</param>
            <param name="scale">Scale of the emitter.</param>
        </member>
        <member name="P:CryEngine.Terrain.Size">
            <summary>
            Gets the size of the terrain in metres.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.UnitsPerMetre">
            <summary>
            Gets the size of each terrain unit.
            </summary>
        </member>
        <member name="P:CryEngine.Terrain.UnitSize">
            <summary>
            Gets the size of the terrain in units.
            </summary>
            <remarks>
            The terrain system calculates the overall size by multiplying this value by the units per metre setting. A map set to 1024 units at 2 metres per unit will have a size of 2048 metres.
            </remarks>
        </member>
        <member name="T:CryEngine.EntityId">
            <summary>
            Entity ID's store references to game entities as unsigned integers. This class wraps that functionality for CLS compliance.
            </summary>
        </member>
        <member name="T:CryEngine.NativeEntity">
            <summary>
            Represents an entity registered outside of CryMono, e.g. in CryGame.dll.
            </summary>
        </member>
        <member name="T:CryEngine.Physics.PhysicalEntity">
            <summary>
            Physical entity present in the physics system.
            </summary>
        </member>
        <member name="M:CryEngine.Physics.PhysicalEntity.Save">
            <summary>
            Save the current physics settings.
            </summary>
        </member>
        <member name="M:CryEngine.Physics.PhysicalEntity.Clear">
            <summary>
            Clears the current physics settings.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.AutoUpdate">
            <summary>
            If true, physics value updates will be automatically applied. Otherwise, Save() must be called manually.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.Resting">
            <summary>
            Determines if this physical entity is in a sleeping state or not. (Will not be affected by gravity)
            Autoamtically wakes upon collision.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.Mass">
            <summary>
            The mass of the entity in kg.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.Slot">
            <summary>
            The entity slot for which these physical parameters apply.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.Stiffness">
            <summary>
            For characters: the scale of force in joint springs.
            </summary>
        </member>
        <member name="P:CryEngine.Physics.PhysicalEntity.Handle">
            <summary>
            IPhysicalEntity *
            </summary>
        </member>
        <member name="T:CryEngine.Lua.ScriptTable">
            <summary>
            Represents a Lua ScriptTable.
            </summary>
        </member>
        <member name="M:CryEngine.Lua.ScriptTable.Execute(System.String)">
            <summary>
            Global lua script execution
            </summary>
            <param name="buffer"></param>
            <returns>False if execution fails, otherwise true.</returns>
        </member>
        <member name="M:CryEngine.Lua.ScriptTable.CallMethod(System.String,System.Object[])">
            <summary>
            Invokes a method on the script table
            </summary>
            <param name="methodName">Name of the method</param>
            <param name="args">Invocation arguments</param>
            <returns>Result or null</returns>
        </member>
        <member name="M:CryEngine.Lua.ScriptTable.GetValue(System.String)">
            <summary>
            Gets a value within the table.
            </summary>
            <param name="name">Name of the value</param>
            <returns>The value or null</returns>
        </member>
        <member name="M:CryEngine.Lua.ScriptTable.GetTable(System.String)">
            <summary>
            Gets a table within this table.
            </summary>
            <param name="name">Name of the table</param>
            <returns></returns>
        </member>
        <member name="P:CryEngine.Lua.ScriptTable.Handle">
            <summary>
            Handle to the native IScriptTable object
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptReloadMessage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptReloadMessage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CryEngine.Initialization.ScriptReloadMessage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CryEngine.Serialization.CrySerializer.TryWriteReference(CryEngine.Serialization.ObjectReference)">
            <summary>
            Checks if this object has already been serialized.
            </summary>
            <param name="objectReference"></param>
            <returns>true if object had already been serialized.</returns>
        </member>
        <member name="P:CryEngine.Serialization.CrySerializer.ObjectReferences">
            <summary>
            We store a dictionary of all serialized objects in order to not create new instances of types with identical hash codes. (same objects)
            </summary>
        </member>
        <member name="P:CryEngine.Serialization.CrySerializer.IsDebugModeEnabled">
            <summary>
            Toggle debug mode, logs information on possible serialization issues.
            Automatically turned on if mono_realtimeScriptingDebug is set to 1.
            </summary>
        </member>
        <member name="T:CryEngine.BoundingBox">
            <summary>
            Represents an axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingBox.Minimum">
            <summary>
            The minimum point of the box.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingBox.Maximum">
            <summary>
            The maximum point of the box.
            </summary>
        </member>
        <member name="M:CryEngine.BoundingBox.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.BoundingBox"/> struct.
            </summary>
            <param name="minimum">The minimum vertex of the bounding box.</param>
            <param name="maximum">The maximum vertex of the bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.GetCorners">
            <summary>
            Retrieves the eight corners of the bounding box.
            </summary>
            <returns>An array of points representing the eight corners of the bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Contains(CryEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.FromPoints(CryEngine.Vec3[],CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.BoundingBox.FromPoints(CryEngine.Vec3[])">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the box.</param>
            <returns>The newly constructed bounding box.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="points"/> is <c>null</c>.</exception>
        </member>
        <member name="M:CryEngine.BoundingBox.FromSphere(CryEngine.BoundingSphere@,CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.FromSphere(CryEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> from a given sphere.
            </summary>
            <param name="sphere">The sphere that will designate the extents of the box.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Merge(CryEngine.BoundingBox@,CryEngine.BoundingBox@,CryEngine.BoundingBox@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding box.</param>
        </member>
        <member name="M:CryEngine.BoundingBox.Merge(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingBox"/> that is as large as the total combined area of the two specified boxes.
            </summary>
            <param name="value1">The first box to merge.</param>
            <param name="value2">The second box to merge.</param>
            <returns>The newly constructed bounding box.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.op_Equality(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.op_Inequality(CryEngine.BoundingBox,CryEngine.BoundingBox)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Equals(CryEngine.BoundingBox)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingBox.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CryEngine.ContainmentType">
            <summary>
            Describes how one bounding volume contains another.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Disjoint">
            <summary>
            The two bounding volumes don't intersect at all.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Contains">
            <summary>
            One bounding volume completely contains another.
            </summary>
        </member>
        <member name="F:CryEngine.ContainmentType.Intersects">
            <summary>
            The two bounding volumes overlap.
            </summary>
        </member>
        <member name="T:CryEngine.BoundingSphere">
            <summary>
            Represents a bounding sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingSphere.Center">
            <summary>
            The center of the sphere in three dimensional space.
            </summary>
        </member>
        <member name="F:CryEngine.BoundingSphere.Radius">
            <summary>
            The radious of the sphere.
            </summary>
        </member>
        <member name="M:CryEngine.BoundingSphere.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.BoundingBox"/> struct.
            </summary>
            <param name="center">The center of the sphere in three dimensional space.</param>
            <param name="radius">The radius of the sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines whether the current objects contains a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triagnle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.BoundingBox@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Contains(CryEngine.BoundingSphere@)">
            <summary>
            Determines whether the current objects contains a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>The type of containment the two objects have.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromPoints(CryEngine.Vec3[],CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromPoints(CryEngine.Vec3[])">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that fully contains the given points.
            </summary>
            <param name="points">The points that will be contained by the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromBox(CryEngine.BoundingBox@,CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <param name="result">When the method completes, the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.FromBox(CryEngine.BoundingBox)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> from a given box.
            </summary>
            <param name="box">The box that will designate the extents of the sphere.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Merge(CryEngine.BoundingSphere@,CryEngine.BoundingSphere@,CryEngine.BoundingSphere@)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <param name="result">When the method completes, contains the newly constructed bounding sphere.</param>
        </member>
        <member name="M:CryEngine.BoundingSphere.Merge(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Constructs a <see cref="T:CryEngine.BoundingSphere"/> that is the as large as the total combined area of the two specified spheres.
            </summary>
            <param name="value1">The first sphere to merge.</param>
            <param name="value2">The second sphere to merge.</param>
            <returns>The newly constructed bounding sphere.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.op_Equality(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.op_Inequality(CryEngine.BoundingSphere,CryEngine.BoundingSphere)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Equals(CryEngine.BoundingSphere)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.BoundingSphere.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CryEngine.Color">
            <summary>
            Defines a color in terms of its red, green, blue and alpha values.
            </summary>
        </member>
        <member name="M:CryEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new color object specifying the red, green, blue and alpha values.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="alpha"></param>
        </member>
        <member name="M:CryEngine.Color.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Constructs a new color object specifying the red, green, blue and alpha values.
            </summary>
            <param name="rgb"></param>
            <param name="a"></param>
        </member>
        <member name="M:CryEngine.Color.#ctor(System.Single)">
            <summary>
            Constructs a new greyscale color object.
            </summary>
            <param name="brightness">The brightness of the object, where 0 is black, and 1 is white.</param>
        </member>
        <member name="P:CryEngine.Color.R">
            <summary>
            The red value of the color.
            </summary>
        </member>
        <member name="P:CryEngine.Color.G">
            <summary>
            The green value of the color.
            </summary>
        </member>
        <member name="P:CryEngine.Color.B">
            <summary>
            The blue value of the color.
            </summary>
        </member>
        <member name="P:CryEngine.Color.A">
            <summary>
            The alpha value of the color.
            </summary>
        </member>
        <member name="M:CryEngine.Matrix34.ScaleColumn(CryEngine.Vec3)">
            <summary>
            apply scaling to the columns of the matrix.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:CryEngine.Matrix34.Scale(CryEngine.Vec3)">
            <summary>
            apply scaling to matrix.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.TransformVector(CryEngine.Vec3)">
            <summary>
            transforms a vector. the translation is not beeing considered
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.TransformPoint(CryEngine.Vec3)">
            <summary>
            transforms a point and add translation vector
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.OrthonormalizeFast">
            <summary>
            Remove scale from matrix.
            </summary>
        </member>
        <member name="M:CryEngine.Matrix34.Determinant">
            <summary>
            determinant is ambiguous: only the upper-left-submatrix's determinant is calculated
            </summary>
            <returns></returns>
        </member>
        <member name="M:CryEngine.Matrix34.SetSlerp(CryEngine.Matrix34,CryEngine.Matrix34,System.Single)">
            <summary>
             Direct-Matrix-Slerp: for the sake of completeness, I have included the following expression 
             for Spherical-Linear-Interpolation without using quaternions. This is much faster then converting 
             both matrices into quaternions in order to do a quaternion slerp and then converting the slerped 
             quaternion back into a matrix.
             This is a high-precision calculation. Given two orthonormal 3x3 matrices this function calculates 
             the shortest possible interpolation-path between the two rotations. The interpolation curve forms 
             a great arc on the rotation sphere (geodesic). Not only does Slerp follow a great arc it follows 
             the shortest great arc.    Furthermore Slerp has constant angular velocity. All in all Slerp is the 
             optimal interpolation curve between two rotations. 
             STABILITY PROBLEM: There are two singularities at angle=0 and angle=PI. At 0 the interpolation-axis 
             is arbitrary, which means any axis will produce the same result because we have no rotation. Thats 
             why I'm using (1,0,0). At PI the rotations point away from each other and the interpolation-axis 
             is unpredictable. In this case I'm also using the axis (1,0,0). If the angle is ~0 or ~PI, then we 
             have to normalize a very small vector and this can cause numerical instability. The quaternion-slerp 
             has exactly the same problems.                                                                    Ivo
            </summary>
            <param name="m"></param>
            <param name="n"></param>
            <param name="t"></param>
            <example>Matrix33 slerp=Matrix33::CreateSlerp( m,n,0.333f );</example>
        </member>
        <member name="M:CryEngine.Matrix34.IsOrthonormal(System.Single)">
            <summary>
            check if we have an orthonormal-base (general case, works even with reflection matrices)
            </summary>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:CryEngine.Ray">
            <summary>
            Represents a three dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="F:CryEngine.Ray.Position">
            <summary>
            The position in three dimensional space where the ray starts.
            </summary>
        </member>
        <member name="F:CryEngine.Ray.Direction">
            <summary>
            The normalized direction in which the ray points.
            </summary>
        </member>
        <member name="M:CryEngine.Ray.#ctor(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Ray"/> struct.
            </summary>
            <param name="position">The position in three dimensional space of the origin of the ray.</param>
            <param name="direction">The normalized direction of the ray.</param>
        </member>
        <member name="M:CryEngine.Ray.Cast(CryEngine.EntityQueryFlags,CryEngine.RayWorldIntersectionFlags,System.Int32,System.IntPtr[])">
            <summary>
            Steps through the entity grid and raytraces entities
            traces a finite ray from org along dir
            </summary>
            <param name="objectTypes"></param>
            <param name="flags"></param>
            <param name="maxHits"></param>
            <param name="skipEntities">an array of IPhysicalEntity handles. <see cref="M:CryEngine.Native.NativeHandleExtensions.GetIPhysicalEntity(CryEngine.Physics.PhysicalEntity)"/></param>
            <returns>Detected hits (solid and pierceable)</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a point.
            </summary>
            <param name="point">The point to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Ray@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Ray@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Ray"/>.
            </summary>
            <param name="ray">The ray to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Plane@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.Plane"/>.
            </summary>
            <param name="plane">The plane to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a triangle.
            </summary>
            <param name="vertex1">The first vertex of the triangle to test.</param>
            <param name="vertex2">The second vertex of the triangle to test.</param>
            <param name="vertex3">The third vertex of the triangle to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingBox@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingBox"/>.
            </summary>
            <param name="box">The box to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@,System.Single@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="distance">When the method completes, contains the distance of the intersection,
            or 0 if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.Intersects(CryEngine.BoundingSphere@,CryEngine.Vec3@)">
            <summary>
            Determines if there is an intersection between the current object and a <see cref="T:CryEngine.BoundingSphere"/>.
            </summary>
            <param name="sphere">The sphere to test.</param>
            <param name="point">When the method completes, contains the point of intersection,
            or <see cref="T:CryEngine.Vec3"/> if there was no intersection.</param>
            <returns>Whether the two objects intersected.</returns>
        </member>
        <member name="M:CryEngine.Ray.op_Equality(CryEngine.Ray,CryEngine.Ray)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Ray.op_Inequality(CryEngine.Ray,CryEngine.Ray)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Ray.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Ray.Equals(CryEngine.Ray)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Ray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CryEngine.Vec2">
            <summary>
            Represents a two dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec2"/> struct.
            </summary>
            <param name="values">The values to assign to the X and Y components of the vector. This must be an array with two elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than two elements.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec2.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A two-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Add(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Add(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Subtract(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Subtract(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Multiply(CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Multiply(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Modulate(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Modulate(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Divide(CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Divide(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Negate(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CryEngine.Vec2.Negate(CryEngine.Vec2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Barycentric(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,System.Single,CryEngine.Vec2@)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 2D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Vec2.Barycentric(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 2D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Vec2"/> containing the 2D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Clamp(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec2.Clamp(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Distance(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Distance(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2,CryEngine.Vec2)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.DistanceSquared(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Dot(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Dot(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Perp(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="vector">The vector to base the perpendicular vector on.</param>
            <param name="result">When the method completes, contains the perpendicular vector.</param>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Perp(CryEngine.Vec2)">
            <summary>
            Calculates a vector that is perpendicular to the given vector.
            </summary>
            <param name="vector">The vector to base the perpendicular vector on.</param>
            <returns>The perpendicular vector.</returns>
            <remarks>
            This method finds the perpendicular vector using a 90 degree counterclockwise rotation.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.PerpDot(CryEngine.Vec2@,CryEngine.Vec2@,System.Single@)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the perp dot product of the two vectors.</param>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.PerpDot(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Calculates the perp dot product.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The perp dot product of the two vectors.</returns>
            <remarks>
            The perp dot product is defined as taking the dot product of the perpendicular vector
            of the left vector with the right vector.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Normalize(CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CryEngine.Vec2.Normalize(CryEngine.Vec2)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Lerp(CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.Lerp(CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec2.SmoothStep(CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.SmoothStep(CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Hermite(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec2.Hermite(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec2.CatmullRom(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@,System.Single,CryEngine.Vec2@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec2.CatmullRom(CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,CryEngine.Vec2,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Max(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Max(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Min(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec2.Min(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Reflect(CryEngine.Vec2@,CryEngine.Vec2@,CryEngine.Vec2@)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <param name="result">When the method completes, contains the reflected vector.</param>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec2.Reflect(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Returns the reflection of a vector off a surface that has the specified normal. 
            </summary>
            <param name="vector">The source vector.</param>
            <param name="normal">Normal of the surface.</param>
            <returns>The reflected vector.</returns>
            <remarks>Reflect only gives the direction of a reflection off a surface, it does not determine 
            whether the original vector was close enough to the surface to hit it.</remarks>
        </member>
        <member name="M:CryEngine.Vec2.Orthogonalize(CryEngine.Vec2[],CryEngine.Vec2[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Orthonormalize(CryEngine.Vec2[],CryEngine.Vec2[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2@,CryEngine.Quat@,CryEngine.Vec2@)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CryEngine.Vec4"/>.</param>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2,CryEngine.Quat)">
            <summary>
            Transforms a 2D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CryEngine.Vec4"/>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.Transform(CryEngine.Vec2[],CryEngine.Quat@,CryEngine.Vec2[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec2.op_Addition(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_UnaryPlus(CryEngine.Vec2)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Subtraction(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_UnaryNegation(CryEngine.Vec2)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Multiply(System.Single,CryEngine.Vec2)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Multiply(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Division(CryEngine.Vec2,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Equality(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Inequality(CryEngine.Vec2,CryEngine.Vec2)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Explicit(CryEngine.Vec2)~CryEngine.Vec3">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec2"/> to <see cref="T:CryEngine.Vec3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec2.op_Explicit(CryEngine.Vec2)~CryEngine.Vec4">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec2"/> to <see cref="T:CryEngine.Vec4"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(CryEngine.Vec2)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec2"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(CryEngine.Vec2,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance using an epsilon value.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec2"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec2"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Vec2.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Vec2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="P:CryEngine.Vec2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:CryEngine.Vec2.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:CryEngine.Vec2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:CryEngine.Vec2.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="T:CryEngine.Vec4">
            <summary>
            Represents a four dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">The value that will be assigned to all components.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the vector.</param>
            <param name="y">Initial value for the Y component of the vector.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(CryEngine.Vec3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X, Y, and Z components.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(CryEngine.Vec2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="value">A vector containing the values with which to initialize the X and Y components.</param>
            <param name="z">Initial value for the Z component of the vector.</param>
            <param name="w">Initial value for the W component of the vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:CryEngine.Vec4"/> struct.
            </summary>
            <param name="values">The values to assign to the X, Y, Z, and W components of the vector. This must be an array with four elements.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="values"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="values"/> contains more or less than four elements.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Normalize">
            <summary>
            Converts the vector into a unit vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec4.ToArray">
            <summary>
            Creates an array containing the elements of the vector.
            </summary>
            <returns>A four-element array containing the components of the vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Add(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Add(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Subtract(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Subtract(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Multiply(CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Multiply(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Modulate(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <param name="result">When the method completes, contains the modulated vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Modulate(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Modulates a vector with another by performing component-wise multiplication.
            </summary>
            <param name="left">The first vector to modulate.</param>
            <param name="right">The second vector to modulate.</param>
            <returns>The modulated vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Divide(CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Divide(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Negate(CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:CryEngine.Vec4.Negate(CryEngine.Vec4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Barycentric(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,System.Single,CryEngine.Vec4@)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <param name="result">When the method completes, contains the 4D Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:CryEngine.Vec4.Barycentric(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single,System.Single)">
            <summary>
            Returns a <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of a point specified in Barycentric coordinates relative to a 4D triangle.
            </summary>
            <param name="value1">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 1 of the triangle.</param>
            <param name="value2">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 2 of the triangle.</param>
            <param name="value3">A <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of vertex 3 of the triangle.</param>
            <param name="amount1">Barycentric coordinate b2, which expresses the weighting factor toward vertex 2 (specified in <paramref name="value2"/>).</param>
            <param name="amount2">Barycentric coordinate b3, which expresses the weighting factor toward vertex 3 (specified in <paramref name="value3"/>).</param>
            <returns>A new <see cref="T:CryEngine.Vec4"/> containing the 4D Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Clamp(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec4.Clamp(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Distance(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the distance between the two vectors.</param>
            <remarks>
            <see cref="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Distance(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The distance between the two vectors.</returns>
            <remarks>
            <see cref="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4,CryEngine.Vec4)"/> may be preferred when only the relative distance is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <param name="result">When the method completes, contains the squared distance between the two vectors.</param>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.DistanceSquared(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the squared distance between two vectors.
            </summary>
            <param name="value1">The first vector.</param>
            <param name="value2">The second vector.</param>
            <returns>The squared distance between the two vectors.</returns>
            <remarks>Distance squared is the value before taking the square root. 
            Distance squared can often be used in place of distance if relative comparisons are being made. 
            For example, consider three points A, B, and C. To determine whether B or C is further from A, 
            compare the distance between A and B to the distance between A and C. Calculating the two distances 
            involves two square roots, which are computationally expensive. However, using distance squared 
            provides the same information and avoids calculating two square roots.
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Dot(CryEngine.Vec4@,CryEngine.Vec4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector</param>
            <param name="right">Second source vector.</param>
            <param name="result">When the method completes, contains the dot product of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Dot(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="left">First source vector.</param>
            <param name="right">Second source vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Normalize(CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:CryEngine.Vec4.Normalize(CryEngine.Vec4)">
            <summary>
            Converts the vector into a unit vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Lerp(CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.Lerp(CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The linear interpolation of the two vectors.</returns>
            <remarks>
            This method performs the linear interpolation based on the following formula.
            <code>start + (end - start) * amount</code>
            Passing <paramref name="amount"/> a value of 0 will cause <paramref name="start"/> to be returned; a value of 1 will cause <paramref name="end"/> to be returned. 
            </remarks>
        </member>
        <member name="M:CryEngine.Vec4.SmoothStep(CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <param name="result">When the method completes, contains the cubic interpolation of the two vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.SmoothStep(CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a cubic interpolation between two vectors.
            </summary>
            <param name="start">Start vector.</param>
            <param name="end">End vector.</param>
            <param name="amount">Value between 0 and 1 indicating the weight of <paramref name="end"/>.</param>
            <returns>The cubic interpolation of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Hermite(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Hermite spline interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec4.Hermite(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a Hermite spline interpolation.
            </summary>
            <param name="value1">First source position vector.</param>
            <param name="tangent1">First source tangent vector.</param>
            <param name="value2">Second source position vector.</param>
            <param name="tangent2">Second source tangent vector.</param>
            <param name="amount">Weighting factor.</param>
            <returns>The result of the Hermite spline interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec4.CatmullRom(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@,System.Single,CryEngine.Vec4@)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <param name="result">When the method completes, contains the result of the Catmull-Rom interpolation.</param>
        </member>
        <member name="M:CryEngine.Vec4.CatmullRom(CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,CryEngine.Vec4,System.Single)">
            <summary>
            Performs a Catmull-Rom interpolation using the specified positions.
            </summary>
            <param name="value1">The first position in the interpolation.</param>
            <param name="value2">The second position in the interpolation.</param>
            <param name="value3">The third position in the interpolation.</param>
            <param name="value4">The fourth position in the interpolation.</param>
            <param name="amount">Weighting factor.</param>
            <returns>A vector that is the result of the Catmull-Rom interpolation.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Max(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Max(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Min(CryEngine.Vec4@,CryEngine.Vec4@,CryEngine.Vec4@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec4.Min(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Orthogonalize(CryEngine.Vec4[],CryEngine.Vec4[])">
            <summary>
            Orthogonalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthogonalized vectors.</param>
            <param name="source">The list of vectors to orthogonalize.</param>
            <remarks>
            <para>Orthogonalization is the process of making all vectors orthogonal to each other. This
            means that any given vector in the list will be orthogonal to any other given vector in the
            list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Orthonormalize(CryEngine.Vec4[],CryEngine.Vec4[])">
            <summary>
            Orthonormalizes a list of vectors.
            </summary>
            <param name="destination">The list of orthonormalized vectors.</param>
            <param name="source">The list of vectors to orthonormalize.</param>
            <remarks>
            <para>Orthonormalization is the process of making all vectors orthogonal to each
            other and making all vectors of unit length. This means that any given vector will
            be orthogonal to any other given vector in the list.</para>
            <para>Because this method uses the modified Gram-Schmidt process, the resulting vectors
            tend to be numerically unstable. The numeric stability decreases according to the vectors
            position in the list so that the first vector is the most stable and the last vector is the
            least stable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4@,CryEngine.Quat@,CryEngine.Vec4@)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="result">When the method completes, contains the transformed <see cref="T:CryEngine.Vec4"/>.</param>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4,CryEngine.Quat)">
            <summary>
            Transforms a 4D vector by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="vector">The vector to rotate.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <returns>The transformed <see cref="T:CryEngine.Vec4"/>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.Transform(CryEngine.Vec4[],CryEngine.Quat@,CryEngine.Vec4[])">
            <summary>
            Transforms an array of vectors by the given <see cref="T:CryEngine.Quat"/> rotation.
            </summary>
            <param name="source">The array of vectors to transform.</param>
            <param name="rotation">The <see cref="T:CryEngine.Quat"/> rotation to apply.</param>
            <param name="destination">The array for which the transformed vectors are stored.
            This array may be the same array as <paramref name="source"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="source"/> or <paramref name="destination"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="destination"/> is shorter in length than <paramref name="source"/>.</exception>
        </member>
        <member name="M:CryEngine.Vec4.op_Addition(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_UnaryPlus(CryEngine.Vec4)">
            <summary>
            Assert a vector (return it unchanged).
            </summary>
            <param name="value">The vector to assert (unchange).</param>
            <returns>The asserted (unchanged) vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Subtraction(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="left">The first vector to subtract.</param>
            <param name="right">The second vector to subtract.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_UnaryNegation(CryEngine.Vec4)">
            <summary>
            Reverses the direction of a given vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Multiply(System.Single,CryEngine.Vec4)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Multiply(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Division(CryEngine.Vec4,System.Single)">
            <summary>
            Scales a vector by the given value.
            </summary>
            <param name="value">The vector to scale.</param>
            <param name="scale">The amount by which to scale the vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Equality(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Tests for equality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has the same value as <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Inequality(CryEngine.Vec4,CryEngine.Vec4)">
            <summary>
            Tests for inequality between two objects.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns><c>true</c> if <paramref name="left"/> has a different value than <paramref name="right"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Explicit(CryEngine.Vec4)~CryEngine.Vec2">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec4"/> to <see cref="T:CryEngine.Vec2"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec4.op_Explicit(CryEngine.Vec4)~CryEngine.Vec3">
            <summary>
            Performs an explicit conversion from <see cref="T:CryEngine.Vec4"/> to <see cref="T:CryEngine.Vec3"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(CryEngine.Vec4)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(CryEngine.Vec4,System.Single)">
            <summary>
            Determines whether the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CryEngine.Vec4"/> to compare with this instance.</param>
            <param name="epsilon">The amount of error allowed.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:CryEngine.Vec4"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CryEngine.Vec4.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CryEngine.Vec4.IsNormalized">
            <summary>
            Gets a value indicting whether this instance is normalized.
            </summary>
        </member>
        <member name="P:CryEngine.Vec4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="P:CryEngine.Vec4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
            <remarks>
            <see cref="P:CryEngine.Vec4.LengthSquared"/> may be preferred when only the relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="P:CryEngine.Vec4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
            <remarks>
            This method may be preferred to <see cref="P:CryEngine.Vec4.Length"/> when only a relative length is needed
            and speed is of the essence.
            </remarks>
        </member>
        <member name="T:CryEngine.Testing.Assert">
            <summary>
            Contains methods used to make assertions for testing purposes.
            </summary>
        </member>
        <member name="M:CryEngine.Testing.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a given statement is true.
            </summary>
            <param name="value">The value to be asserted as true.</param>
            <exception cref="T:CryEngine.Testing.AssertionFailedException">Thrown if the value is false.</exception>
        </member>
        <member name="M:CryEngine.Testing.Assert.Throws``1(System.Action,System.Boolean)">
            <summary>
            Asserts that a given expression throws an exception of type T.
            </summary>
            <typeparam name="T">The expression that should be thrown within the supplied method.</typeparam>
            <param name="method">The method in which the expression should be thrown.</param>
            <param name="includeChildren">Specifies whether subclassed exceptions should be counted as valid.</param>
            <returns>The exception that was thrown as expected.</returns>
            <exception cref="T:CryEngine.Testing.AssertionFailedException">Thrown if an exception of type T is not thrown.</exception>
        </member>
        <member name="T:CryEngine.Testing.TestCollectionAttribute">
            <summary>
            Indicates that a class should be loaded by the unit tester.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.TestAttribute">
            <summary>
            Indicates that a method should be run as a test.
            Requires that the method belong to a class decorated with a TestCollectionAttribute.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.IgnoreTestAttribute">
            <summary>
            Indicates that a test should be ignored.
            Ignored tests will not be reported as a success; they will be reported as ignored.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.AssertionFailedException">
            <summary>
            The exception that is thrown when a false assertion is made.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.ConsoleTestListener">
            <summary>
            Example report listener, used to log the results of a test run to the console.
            </summary>
        </member>
        <member name="M:CryEngine.Testing.ConsoleTestListener.#ctor">
            <summary>
            Constructs a new ConsoleTestListener and subscribes to the TestManager.Run event.
            </summary>
        </member>
        <member name="M:CryEngine.Testing.ConsoleTestListener.OnTestsRun(CryEngine.Testing.TestReport)">
            <summary>
            Called when a report is received.
            </summary>
            <param name="report">The report, containing all test information.</param>
        </member>
        <member name="F:CryEngine.Testing.Internals.ReportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CryEngine.Testing.Internals.ReportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CryEngine.Testing.Internals.ReportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.TestReport">
            <summary>
            Contains all the test data for a single run.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestReport.Collections">
            <summary>
            The test collections which were run.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestReport.TimeTaken">
            <summary>
            The time the entire unit test set took to execute.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.TestResult">
            <summary>
            Indicates the actual result of a given single test.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.TestResultInfo">
            <summary>
            Contains detailed information on the result of a test.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.Name">
            <summary>
            The name of the test.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.Description">
            <summary>
            The optional test description.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.Result">
            <summary>
            The result of the test.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.Stack">
            <summary>
            The full stracktrace for this test, if it failed.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.FirstFrame">
            <summary>
            For convenience, the first desired frame from the stack.
            If the frame is inside CryBrary due to an assertion, we drop down one frame.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestResultInfo.Exception">
            <summary>
            The exception that caused this test to fail, if it did.
            </summary>
        </member>
        <member name="T:CryEngine.Testing.TestCollectionResult">
            <summary>
            Contains the results for a set of tests.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestCollectionResult.Name">
            <summary>
            The name of this collection.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestCollectionResult.Description">
            <summary>
            The optional collection description.
            </summary>
        </member>
        <member name="P:CryEngine.Testing.TestCollectionResult.Results">
            <summary>
            The individual results for the tests in this collection.
            </summary>
        </member>
        <member name="F:CryEngine.MathHelpers.ZeroTolerance">
            <summary>
            The value for which all absolute numbers smaller than are considered equal to zero.
            </summary>
        </member>
        <member name="M:CryEngine.MathHelpers.DegreesToRadians(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.MathHelpers.DegreesToRadians(System.Single)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.MathHelpers.RadiansToDegrees(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.MathHelpers.RadiansToDegrees(System.Single)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="angle"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.MathHelpers.IsInRange``1(``0,``0,``0)">
            <summary>
            Determines whether a value is inside the specified range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:CryEngine.MathHelpers.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps a value given a specified range.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="P:CryEngine.RaycastHit.Entity">
            <summary>
            Entity that the ray collided with.
            </summary>
        </member>
        <member name="P:CryEngine.RaycastHit.SurfaceType">
            <summary>
            The surface type that the ray collided with.
            </summary>
        </member>
        <member name="P:CryEngine.RaycastHit.OriginalMaterialIndex">
            <summary>
            original material index, not mapped with material mapping
            </summary>
        </member>
        <member name="P:CryEngine.RaycastHit.iNode">
            <summary>
            BV tree node that had the intersection; can be used for "warm start" next time
            </summary>
        </member>
        <member name="P:CryEngine.RaycastHit.iPrim">
            <summary>
            hit triangle index
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.SeperateImportantHits">
            <summary>
            among pierceble hits, materials with sf_important will have priority
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.CollissionTypeBit">
            <summary>
            used to manually specify collision geometry types (default is geom_colltype_ray)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.CollissionTypeAny">
            <summary>
            if several colltype flag are specified, switches between requiring all or any of them in a geometry
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.Queue">
            <summary>
            queues the RWI request, when done it'll generate EventPhysRWIResult
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.ForcePiercableNonCollidable">
            <summary>
            non-colliding geometries will be treated as pierceable regardless of the actual material
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.DebugTrace">
            <summary>
            marks the rwi to be a debug rwi (used for spu debugging, only valid in non-release builds)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.UpdateLastHit">
            <summary>
            update phitLast with the current hit results (should be set if the last hit should be reused for a "warm" start)
            </summary>
        </member>
        <member name="F:CryEngine.RayWorldIntersectionFlags.AnyHit">
            <summary>
            returns the first found hit for meshes, not necessarily the closest
            </summary>
        </member>
        <member name="T:CryEngine.EntityQueryFlags">
            <summary>
            Used for GetEntitiesInBox and RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.SortByMass">
            <summary>
            sort by mass in ascending order
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.AllocateList">
            <summary>
            if not set, the function will return an internal pointer
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.AddRefResults">
            <summary>
            will call AddRef on each entity in the list (expecting the caller call Release)
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.Water">
            <summary>
            can only be used in RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.NoOnDemandActivation">
            <summary>
            can only be used in RayWorldIntersection
            </summary>
        </member>
        <member name="F:CryEngine.EntityQueryFlags.DelayedDeformations">
            <summary>
            queues procedural breakage requests; can only be used in SimulateExplosion
            </summary>
        </member>
        <member name="M:CryEngine.Renderer.LoadTexture(System.String)">
            <summary>
            Loads a texture into memory and generates its ID.
            </summary>
            <param name="texturePath">The path to the texture.</param>
            <returns>Texture id if successful, otherwise -1.</returns>
        </member>
        <member name="M:CryEngine.Renderer.DrawTexture(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a texture to the screen for one frame.
            </summary>
            <param name="x">The x position on the screen, relative to the top-left corner.</param>
            <param name="y">The y position on the screen, relative to the top-left corner.</param>
            <param name="width">The width to render the texture at.</param>
            <param name="height">The height to render the texture at.</param>
            <param name="textureId">The ID of the texture (obtained using Renderer.LoadTexture(path)).</param>
        </member>
        <member name="P:CryEngine.Renderer.ScreenHeight">
            <summary>
            Gets the width of the screen in pixels.
            </summary>
        </member>
        <member name="P:CryEngine.Renderer.ScreenWidth">
            <summary>
            Gets the height of the screen in pixels.
            </summary>
        </member>
        <member name="M:CryEngine.Network.InitializeNetworkStatics(System.Boolean,System.Boolean)">
            <summary>
            Initializes static variables which never change, i.e. IsEditor.
            </summary>
            <param name="isEditor"></param>
            <param name="isDedicated"></param>
        </member>
        <member name="F:CryEngine.Quat.V">
            <summary>
            The X, Y and Z components of the quaternion.
            </summary>
        </member>
        <member name="F:CryEngine.Quat.W">
            <summary>
            The W component of the quaternion.
            </summary>
        </member>
        <member name="M:CryEngine.Quat.ClampAngle(System.Single)">
            <summary>
            
            </summary>
            <param name="maxAngle">Max angle in radians</param>
        </member>
        <member name="F:CryEngine.Quat.Identity">
            <summary>
            The identity <see cref="T:CryEngine.Quat"/> (0, 0, 0, 1).
            </summary>
        </member>
        <member name="T:CryEngine.ExcludeFromCompilationAttribute">
            <summary>
            If this attribute is attached to a class, it will be excluded from compilation.
            </summary>
        </member>
        <member name="M:CryEngine.ConsoleCommand.Execute(System.String,System.Boolean)">
            <summary>
            Executes a string in the console
            </summary>
            <param name="command">console command e.g. "map testy" - no leading slash</param>
            <param name="silent">suppresses log in error case and logging the command to the console</param>
        </member>
        <member name="M:CryEngine.ConsoleCommand.Register(System.String,CryEngine.ConsoleCommandDelegate,System.String,CryEngine.CVarFlags)">
            <summary>
            Register a new console command.
            </summary>
            <param name="name">Command name.</param>
            <param name="func">Delegate to the console command function to be called when command is invoked.</param>
            <param name="comment">Help string, will be displayed when typing in console "command ?".</param>
            <param name="flags">Bitfield consist of VF_ flags (e.g. VF_CHEAT)</param>
        </member>
        <member name="T:CryEngine.Time">
            <summary>
            Contains useful functions related to game timing.
            </summary>
        </member>
        <member name="P:CryEngine.Time.FrameStartTime">
            <summary>
            Returns the absolute time of the last frame start in milliseconds.
            </summary>
        </member>
        <member name="P:CryEngine.Time.AsyncTime">
            <summary>
            Returns the absolute current time.
            Note: The value continuously changes, slower than GetFrameStartTime().
            </summary>
        </member>
        <member name="P:CryEngine.Time.DeltaTime">
            <summary>
            The time used to render the current frame. Useful for creating framerate independent operations.
            </summary>
            <example>public override void OnUpdate() { this.Position.X += 10 * Time.DeltaTime; }</example>
        </member>
        <member name="P:CryEngine.Time.TimeScale">
            <summary>
            Sets / gets the time scale applied to time values.
            </summary>
        </member>
        <member name="P:CryEngine.Time.Framerate">
            <summary>
            Returns the current framerate in frames/second.
            </summary>
        </member>
        <member name="T:CryEngine.Debug">
            <summary>
            Contains methods useful for tracking down bugs.
            </summary>
            <summary>
            Contains methods useful for tracking down bugs.
            </summary>
        </member>
        <member name="M:CryEngine.Debug.Log(System.String,System.Object[])">
            <summary>
            Logs a message to the console
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.Log(System.String)">
            <summary>
            Logs a message to the console
            </summary>
        </member>
        <member name="M:CryEngine.Debug.LogAlways(System.String,System.Object[])">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.LogAlways(System.String)">
            <summary>
            Logs a message to the console, regardless of log_verbosity settings
            </summary>
        </member>
        <member name="M:CryEngine.Debug.LogException(System.Exception)">
            <summary>
            Logs an exception message to the console
            </summary>
            <remarks>Useful when exceptions are caught and data is still needed from them</remarks>
            <param name="ex"></param>
        </member>
        <member name="M:CryEngine.Debug.DisplayException(System.Exception,System.Boolean)">
            <summary>
            Displays an exception via the CryMono exception form.
            </summary>
            <param name="ex">The exception that occurred</param>
            <param name="fatal">Indicates if this exception is fatal</param>
        </member>
        <member name="M:CryEngine.Debug.LogWarning(System.String,System.Object[])">
            <summary>
            Outputs a warning message
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:CryEngine.Debug.LogWarning(System.String)">
            <summary>
            Outputs a warning message
            </summary>
        </member>
        <member name="T:CryEngine.Extensions.ReflectionExtensions">
            <summary>
            Useful extensions when working with reflection.
            </summary>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.Implements(System.Type,System.Type)">
            <summary>
            Determines whether a given type is the child of another.
            </summary>
            <param name="thisType">The child type.</param>
            <param name="baseType">The possible parent type.</param>
            <returns>True if thisType is a child of baseType.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.Implements``1(System.Type)">
            <summary>
            Determines whether a given type is the child of another.
            </summary>
            <typeparam name="T">The possible parent type.</typeparam>
            <param name="thisType">The child type.</param>
            <returns>True if thisType implements type T.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.ContainsAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether this member is decorated with at least one instance of a given attribute.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="info">The member on which the search is performed.</param>
            <returns>True if the member is decorated with at least one instance of attribute T.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets all instances of a given attribute on the selected member.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="memberInfo">The member on which the search is performed.</param>
            <returns>The first instance of attribute T, or null if none is found.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the first instance of a given attribute on the selected member.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="memberInfo">The member on which the search is performed.</param>
            <returns>The first instance of attribute T, or null if none is found.</returns>
        </member>
        <member name="M:CryEngine.Extensions.ReflectionExtensions.TryGetAttribute``1(System.Reflection.MemberInfo,``0@)">
            <summary>
            Tests whether the method is decorated with a given attribute, and if so, assigns it via the out variable.
            </summary>
            <typeparam name="T">The attribute to search for.</typeparam>
            <param name="memberInfo">The member on which the search is performed.</param>
            <param name="attribute">The out parameter to which the attribute will be assigned.</param>
            <returns>True if the attribute exists.</returns>
        </member>
        <member name="T:CryEngine.EntityFlags">
            <summary>
            These flags control entity instance behaviour.
            </summary>
        </member>
        <member name="F:CryEngine.EntityFlags.TriggerAreas">
            <summary>
            Entity will trigger areas when it enters them.
            </summary>
        </member>
        <member name="F:CryEngine.EntityFlags.NoSave">
            <summary>
            This entity will not be saved.
            </summary>
        </member>
        <member name="F:CryEngine.EntityFlags.Spawned">
            <summary>
            Entity was spawned dynamically without a class.
            </summary>
        </member>
        <member name="T:CryEngine.EntityClassFlags">
            <summary>
            These flags define behaviour for entity classes.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Invisible">
            <summary>
            If set this class will not be visible in editor,and entity of this class cannot be placed manually in editor.
            </summary>
        </member>
        <member name="F:CryEngine.EntityClassFlags.Default">
            <summary>
            If this is default entity class.
            </summary>
        </member>
        <member name="T:CryEngine.GameRules">
            <summary>
            This is the base GameRules interface. All game rules must implement this.
            </summary>
        </member>
        <member name="P:CryEngine.GameRules.Current">
            <summary>
            Gets the currently active game rules instance.
            </summary>
        </member>
        <member name="T:CryEngine.Utilities.PointerWrapper">
            <summary>
            Wrapper to be able to make sure that we're getting the correct handle in C++.
            In native code, interpret as struct MyStruct { void *pHandle; } (See mono::pointer)
            </summary>
        </member>
        <member name="T:CryEngine.Utilities.CryStats">
            <summary>
            CryStats enables tracking of commonly used library statistics such as memory usage.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsageMB">
            <summary>
            The current approximate memory usage in megabytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsageKB">
            <summary>
            The current approximate memory usage in kilobytes.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.CryStats.MemoryUsage">
            <summary>
            The current approximate memory usage in bytes.
            </summary>
        </member>
        <member name="T:CryEngine.Vec3">
            <summary>
            Represents a three dimensional mathematical vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:CryEngine.Vec3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.SetProjection(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Project a point / vector on a (virtual) plane.
            Consider we have a plane going through the origin.
            Because d = 0 we need just the normal. The vector n is assumed to be a unit vector.
            </summary>
            <param name="i"></param>
            <param name="n"></param>
        </member>
        <member name="M:CryEngine.Vec3.SetReflection(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Calculate a reflection vector. Vec3 n is assumed to be a unit-vector.
            </summary>
        </member>
        <member name="M:CryEngine.Vec3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CryEngine.Vec3.Clamp(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">When the method completes, contains the clamped value.</param>
        </member>
        <member name="M:CryEngine.Vec3.Clamp(CryEngine.Vec3,CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Restricts a value to be within a specified range.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Max(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the largest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Max(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the largest components of the source vectors.</returns>
        </member>
        <member name="M:CryEngine.Vec3.Min(CryEngine.Vec3@,CryEngine.Vec3@,CryEngine.Vec3@)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <param name="result">When the method completes, contains an new vector composed of the smallest components of the source vectors.</param>
        </member>
        <member name="M:CryEngine.Vec3.Min(CryEngine.Vec3,CryEngine.Vec3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors.
            </summary>
            <param name="left">The first source vector.</param>
            <param name="right">The second source vector.</param>
            <returns>A vector containing the smallest components of the source vectors.</returns>
        </member>
        <member name="T:CryEngine.Utilities.PathUtils">
            <summary>
            Provides a clean method of retrieving commonly used engine filepaths.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.RootFolder">
            <summary>
            Gets the root engine folder.
            </summary>
            <returns>The filepath to the root folder as a string, ex:</returns>
            <example>"C:\CryENGINE3"</example>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.BinaryFolder">
            <summary>
            Gets the folder containing binaries relevant to current build type (Bin32 / Bin64).
            </summary>
            <returns>The filepath to the Binary folder as a string, ex:
            <example>"C:\CryENGINE3\Bin32"</example></returns>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.ConfigFolder">
            <summary>
            Gets the folder containing CryMono configuration files.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.PluginsFolder">
            <summary>
            Directory from which CryMono will load managed plugins.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.MonoFolder">
            <summary>
            Gets the Mono folder containing essential Mono libraries and configuration files.
            </summary>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.EngineFolder">
            <summary>
            Gets the engine folder.
            CryENGINE uses this store engine content which is not specific to the game being developed, i.e. shaders and configuration files.
            </summary>
            <returns>The filepath to the Engine folder as a string, ex:
            <example>"C:\CryENGINE3\Engine"</example></returns>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.GameFolder">
            <summary>
            Gets the current game folder.
            CryENGINE uses this as the root for all game-related content.
            </summary>
            <returns>The filepath to the Game folder as a string, ex:
            <example>"C:\CryENGINE3\Game"</example></returns>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.ScriptsFolder">
            <summary>
            Gets the folder in which the engine stores scripts.
            We use this as the root for our .cs files and .dll plugins.
            </summary>
            <returns>The filepath to the Scripts folder as a string, ex:
            <example>"C:\CryENGINE3\Game\Scripts"</example></returns>
        </member>
        <member name="P:CryEngine.Utilities.PathUtils.TempFolder">
            <summary>
            Gets the directory CryMono uses to store temporary files.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.RegisterFlownodes">
            <summary>
            Called from GameDll
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.LoadAssembly(System.String)">
            <summary>
            Loads a C# assembly by location, creates a shadow-copy and generates debug database (mdb).
            </summary>
            <param name="assemblyPath"></param>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.OnUpdate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Called once per frame.
            </summary>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.CreateScriptInstance(System.String,CryEngine.Initialization.ScriptType,System.Object[],System.Boolean)">
            <summary>
            Instantiates a script using its name and interface.
            </summary>
            <param name="scriptName"></param>
            <param name="scriptType"></param>
            <param name="constructorParams"></param>
            <returns>New instance scriptId or -1 if instantiation failed.</returns>
        </member>
        <member name="M:CryEngine.Initialization.ScriptManager.RemoveInstances``1(CryEngine.Initialization.ScriptType,System.Predicate{``0})">
            <summary>
            Locates and removes the script with the assigned scriptId.
            </summary>
        </member>
        <member name="F:CryEngine.Initialization.ScriptManager.LastScriptId">
            <summary>
            Last assigned ScriptId, next = + 1
            </summary>
        </member>
        <member name="T:CryEngine.Initialization.ScriptNotFoundException">
            <summary>
            Thrown by <see cref="T:CryEngine.Initialization.ScriptManager"/> if a CryScript could not be located.
            </summary>
        </member>
    </members>
</doc>
